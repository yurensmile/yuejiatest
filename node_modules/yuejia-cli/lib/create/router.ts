import _definition from '../definition.d';
import * as fs from 'fs';
import * as path from 'path';
import firstCharToLower from '../utils/firstCharToLower';
import createDir from './dir';

interface Params {
  projectPath: string;
  routerConfig: _definition.Package['router'];
  routerFile: _definition.ModuleConfig;
  pages: string[];
}

/** 将import的内容添加到content中 */
function createImport(params: Params): string {
  const { routerConfig, pages } = params;
  let content = '';
  for (let i = 0; i < pages.length; i++) {
    const page = pages[i];
    const routerPath = `'../view/pages/${page}'`;
    const file = firstCharToLower(page);
    let importCode;

    // tslint:disable-next-line:prefer-conditional-expression
    if (routerConfig.codeSplitting) {
      importCode = `const ${page} = asyncComponent(() => import(/* webpackChunkName: '${file}' */${routerPath}))`;
    } else {
      importCode = `import(${routerPath})`;
    }

    content += importCode + ';\n';
  }

  return content;
}

/** 创建页面入口 */
function createEntry(params: Params): string {
  const { routerConfig, routerFile, pages } = params;
  const history = routerConfig.mode;
  let content = `<${history}>\n<Switch>\n`;

  for (let i = 0; i < pages.length; i++) {
    const page = pages[i];
    // 判断index路由
    const routerPath = '/' + (routerFile.indexRouter === page ? '' : firstCharToLower(page));
    // 将路由内容添加到content中
    content += `<Route exact path="${routerPath}" component={${page}} />\n`;
  }

  content += `</Switch>\n</${history}>`;

  return content;
}

function writeFile(params: Params): void {
  const { projectPath, routerFile } = params;
  const writeDir = path.resolve(projectPath, 'src/app/router');
  let content = `
    import * as React from 'react';
    import { Route, HashRouter, Switch } from 'react-router-dom';
    import asyncComponent from 'ruler-framework/lib/hoc/AsyncComponent';

  `;

  content += createImport(params);
  content += `
    export default (
  `;
  content += createEntry(params);
  content += ');';

  // 如果不存在router目录则创建
  createDir(writeDir, []);
  fs.writeFileSync(path.resolve(writeDir, (routerFile.name || 'index') + '.tsx'), content, { encoding: 'utf8' });
}

export default function(projectPath: string): void {
  const packageFile = path.resolve(projectPath, 'package.json');
  const pkg: _definition.Package['router'] = JSON.parse(fs.readFileSync(packageFile, 'utf8')).router;
  const moduleConfig = pkg.module;

  if (pkg.autoCreate) {
    for (let i = 0; i < moduleConfig.length; i++) {
      const routerFile = moduleConfig[i];
      const pages = fs.readdirSync(path.resolve(projectPath, `./src/app/view/pages/${routerFile.name}`));

      writeFile({
        projectPath,
        routerConfig: pkg,
        routerFile,
        pages
      });
    }
  }
}