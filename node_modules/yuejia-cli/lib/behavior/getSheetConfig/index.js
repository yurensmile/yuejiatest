"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const fs = require("fs");
const createSourceFile_1 = require("../createSourceFile");
function getDataType(node) {
    if (node) {
        switch (node.kind) {
            case ts.SyntaxKind.StringKeyword:
                return 'string';
            case ts.SyntaxKind.NumberKeyword:
                return 'number';
            default:
                return '';
        }
    }
    return '';
}
function getParams(node) {
    const config = {};
    if (node.kind !== ts.SyntaxKind.InterfaceDeclaration) {
        return;
    }
    const interfaceDeclaration = node;
    if (interfaceDeclaration.name.text !== 'DetailParams') {
        return;
    }
    const members = interfaceDeclaration.members;
    for (let i = 0; i < members.length; i++) {
        const member = members[i];
        if (member.kind === ts.SyntaxKind.PropertySignature) {
            const propertySignature = member;
            const component = propertySignature.name.text;
            const type = propertySignature.type;
            const params = [];
            for (let j = 0; j < type.members.length; j++) {
                const typePropertySignature = type.members[j];
                const jsDoc = typePropertySignature.jsDoc[0].comment;
                const paramName = typePropertySignature.name.text;
                const dataType = getDataType(typePropertySignature.type);
                params.push(`${paramName}: ${dataType}(${jsDoc.trim()})`);
            }
            config[component] = {
                action: [],
                componentName: '',
                params
            };
        }
    }
    return config;
}
function getSheet() {
    const file = fs.readFileSync('./node_modules/yuejia/model/behavior/sheet.txt', { encoding: 'utf8' });
    let sheet;
    eval(file);
    return sheet;
}
function getSheetConfig() {
    const sheetConfigPath = './node_modules/yuejia/model/behavior/sheet.ts';
    let sheet;
    let sheetSource;
    try {
        sheetSource = createSourceFile_1.default(sheetConfigPath);
    }
    catch (err) {
        return sheet;
    }
    sheet = getSheet();
    let params;
    for (let i = 0; i < sheetSource.statements.length; i++) {
        const statement = sheetSource.statements[i];
        if (!params) {
            params = getParams(statement);
        }
    }
    Object.keys(sheet).forEach((key) => {
        if (params[key]) {
            sheet[key].params = params[key].params;
        }
    });
    return sheet;
}
exports.default = getSheetConfig();
