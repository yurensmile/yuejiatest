import * as ts from 'typescript';
import * as fs from 'fs';
import createSourceFile from '../createSourceFile';
// import writeLog from '../writeLog';
// import eachNode from '../eachNode';

export interface Data {
  action: string[];
  componentName: string;
  params: string[];
  requiredName?: boolean;
}

export interface Config {
  [component: string]: Data;
}

/** 获取数据类型 */
function getDataType(node: ts.Node | undefined): string {
  if (node) {
    switch (node.kind) {
      case ts.SyntaxKind.StringKeyword:
        return 'string';
      case ts.SyntaxKind.NumberKeyword:
        return 'number';
      default:
        return '';
    }
  }
  return '';
}

/* 获取组件行为的详情参数 */
function getParams(node: ts.Node): Config | undefined {
  const config: Config = {};

  if (node.kind !== ts.SyntaxKind.InterfaceDeclaration) {
    return;
  }

  const interfaceDeclaration = node as ts.InterfaceDeclaration;
  if (interfaceDeclaration.name.text !== 'DetailParams') {
    return;
  }

  const members = interfaceDeclaration.members;
  for (let i = 0; i < members.length; i++) {
    const member = members[i];

    if (member.kind === ts.SyntaxKind.PropertySignature) {
      const propertySignature = member as ts.PropertySignature;
      const component = (propertySignature.name as ts.Identifier).text;
      const type = propertySignature.type as ts.TypeLiteralNode;
      const params = [];

      for (let j = 0; j < type.members.length; j++) {
        const typePropertySignature = type.members[j] as ts.PropertySignature;
        const jsDoc = (typePropertySignature as any).jsDoc[0].comment as string;
        const paramName = (typePropertySignature.name as ts.Identifier).text;
        const dataType = getDataType(typePropertySignature.type);
        params.push(`${paramName}: ${dataType}(${jsDoc.trim()})`);
      }

      config[component] = {
        action: [],
        componentName: '',
        params
      };
    }
  }

  return config;
}

/** 获取组件行为的配置 */
function getSheet(): Config {
  const file = fs.readFileSync('./node_modules/yuejia/model/behavior/sheet.txt', { encoding: 'utf8' });
  // tslint:disable-next-line:prefer-const
  let sheet!: Config;
  // 为了方便，直接用eavl解析sheet.txt的代码，通过相同变量名的赋值，快速获得sheet变量的数据
  // tslint:disable-next-line:no-eval
  eval(file);
  return sheet;
}

function getSheetConfig(): Config {
  const sheetConfigPath = './node_modules/yuejia/model/behavior/sheet.ts';
  let sheet!: Config;
  let sheetSource: ts.SourceFile;

  try {
    sheetSource = createSourceFile(sheetConfigPath);
  } catch (err) {
    return sheet;
  }

  sheet = getSheet();
  let params!: Config;

  for (let i = 0; i < sheetSource.statements.length; i++) {
    const statement = sheetSource.statements[i];

    if (!params) {
      params = getParams(statement) as Config;
    }
  }

  Object.keys(sheet).forEach((key) => {
    if (params[key]) {
      sheet[key].params = (params as Config)[key].params;
    }
  });

  return sheet;
}

export default getSheetConfig();