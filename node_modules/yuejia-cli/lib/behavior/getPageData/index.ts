// import * as ts from 'typescript';
import createSourceFile from '../createSourceFile';
// import getRouteInNode from '../getRouteInNode';
import parsePageImport from '../parsePageImport';
import eachImprots from '../eachImprots';
import eachNode from '../eachNode';
import getPageNameInNode from '../getPageNameInNode';
import getComponentBehavior from '../getComponentBehavior';
import { Data as XlsxData } from '../createXlsx';
import sheetConfig, { Data } from '../getSheetConfig';
// import getTriggerstatement from '../getTriggerstatement';

let keys: string[] = [];
if (sheetConfig) {
  keys = Object.keys(sheetConfig);
}

// export interface PageData {
//   /** 页面文件名 */
//   // filename: string;
//   /** 页面标题（名称） */
//   pageName: string;
//   /** 从该页面跳转其他页面的路由 */
//   goRoutes: string[];
// }

/**
 * 获取页面文件的数据
 * @param pagePath 页面路径
 */
export default function getPageData(pagePath: string): XlsxData[] {
  // 源文件
  const sourceFile = createSourceFile(pagePath);
  const behavior: (Data | undefined)[] = [];
  const data: XlsxData[] = [];
  let pageName: string = '';

  for (let i = 0; i < sourceFile.statements.length; i++) {
    eachNode(sourceFile.statements[i], (node) => {
      // 对当前页面进行一次路由遍历
      // const route = getRouteInNode(node, pagePath);

      // if (specifier) {
      //   specifierArr.push(specifier);
      // }
      keys.forEach((tagName) => {
        behavior.push(getComponentBehavior(node, tagName));
      });
      // behavior.push(getTriggerstatement(node));
      // 如果已经获得了就不再执行
      if (!pageName) {
        pageName = getPageNameInNode(node);
      }
    });
  }

  // 对页面的引用进行递归遍历，把当前页面所有会用到路由的语句收集起来
  eachImprots(sourceFile, (specifier) => {
    parsePageImport(pagePath, specifier, (childSourceFile, fullpath) => {
      for (let i = 0; i < childSourceFile.statements.length; i++) {
        eachNode(childSourceFile.statements[i], (node) => {
          keys.forEach((tagName) => {
            behavior.push(getComponentBehavior(node, tagName));
          });
          // behavior.push(getTriggerstatement(node));
        });
      }
    });
  });

  behavior.forEach((block) => {
    if (block) {
      block.action.forEach((item) => {
        data.push({
          pageName,
          actionName: block.componentName ? `${item}-${block.componentName}` : item,
          detailParams: block.params ? block.params.join('\n') : ''
        });
      });
    }
  });

  return data;
}