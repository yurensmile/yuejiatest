"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const createSourceFile_1 = require("../createSourceFile");
const parsePageImport_1 = require("../parsePageImport");
const eachImprots_1 = require("../eachImprots");
const eachNode_1 = require("../eachNode");
const getPageNameInNode_1 = require("../getPageNameInNode");
const getComponentBehavior_1 = require("../getComponentBehavior");
const getSheetConfig_1 = require("../getSheetConfig");
let keys = [];
if (getSheetConfig_1.default) {
    keys = Object.keys(getSheetConfig_1.default);
}
function getPageData(pagePath) {
    const sourceFile = createSourceFile_1.default(pagePath);
    const behavior = [];
    const data = [];
    let pageName = '';
    for (let i = 0; i < sourceFile.statements.length; i++) {
        eachNode_1.default(sourceFile.statements[i], (node) => {
            keys.forEach((tagName) => {
                behavior.push(getComponentBehavior_1.default(node, tagName));
            });
            if (!pageName) {
                pageName = getPageNameInNode_1.default(node);
            }
        });
    }
    eachImprots_1.default(sourceFile, (specifier) => {
        parsePageImport_1.default(pagePath, specifier, (childSourceFile, fullpath) => {
            for (let i = 0; i < childSourceFile.statements.length; i++) {
                eachNode_1.default(childSourceFile.statements[i], (node) => {
                    keys.forEach((tagName) => {
                        behavior.push(getComponentBehavior_1.default(node, tagName));
                    });
                });
            }
        });
    });
    behavior.forEach((block) => {
        if (block) {
            block.action.forEach((item) => {
                data.push({
                    pageName,
                    actionName: block.componentName ? `${item}-${block.componentName}` : item,
                    detailParams: block.params ? block.params.join('\n') : ''
                });
            });
        }
    });
    return data;
}
exports.default = getPageData;
