import * as fs from 'fs';
import * as XLSX from 'xlsx-style';

export interface Data {
  pageName: string;
  actionName: string;
  detailParams: any;
}

export default function createXlsx(data: Data[]): void {
  const pkg = fs.readFileSync('./package.json', { encoding: 'utf8' });
  const pkgObj = JSON.parse(pkg);
  const version = pkgObj.version;
  const project = pkgObj.description;
  const workSheet: XLSX.WorkSheet = {};
  // 表头键值映射
  const keyMap = ['页面名称', '行为名称', '详细参数'];
  const colsCount = keyMap.length;
  const rows: string[][] = [keyMap, ...data.map((item) => [item.pageName, item.actionName, item.detailParams])];
  const rowsCount = rows.length;
  const range = {
    s: { c: 0, r: 0 },
    e: { c: colsCount - 1, r: rowsCount - 1 }
  };
  const merges: XLSX.Range[] = [];
  // 用于判断合并列的开始位置
  let startRow = 0;
  // 用于判断合并列的结束位置
  let endRow = 0;
  workSheet['!ref'] = XLSX.utils.encode_range(range);

  // 渲染数据
  for (let rowIndex = 0; rowIndex < rowsCount; rowIndex++) {
    if (rows[rowIndex][0] !== rows[endRow][0]) {
      merges.push({
        s: { c: 0, r: startRow },
        e: { c: 0, r: endRow },
      });
      startRow = rowIndex;
    }

    endRow = rowIndex;
    for (let colIndex = 0; colIndex < colsCount; colIndex++) {
      const cell_ref = XLSX.utils.encode_cell({ c: colIndex, r: rowIndex });
      const excelCell = {
        v: rows[rowIndex][colIndex],
        t: 's',
        s: {
          alignment: {
            wrapText: true,
            vertical: 'center'
          }
        }
      };
      workSheet[cell_ref] = excelCell;
    }
  }
  workSheet['!cols'] = [{
    wpx: 300
  }, {
    wpx: 300
  }, {
    wpx: 300
  }];
  workSheet['!merges'] = merges;

  XLSX.writeFile({
    Sheets: {
      默认: workSheet
    },
    SheetNames: ['默认'],
  }, `${project}${version}行为数据.xlsx`, {
    bookType: 'xlsx',
    type: 'file',
  });
  console.log(`${project}${version}行为数据.xlsx 生成完毕`.green);
}