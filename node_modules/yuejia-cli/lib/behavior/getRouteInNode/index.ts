import * as ts from 'typescript';
import findJsxElement from '../findJsxElement';
import getExpressionArgs from '../getExpressionArgs';
import getJsxElementAttr from '../getJsxElementAttr';
import getLiteralValue from '../getLiteralValue';

/**
 * 解析Link语句
 * @param statement
 * @param fullpath
 * @param callback
 */
function getRoute(statement: ts.Node | undefined, statementName: string, fullpath: string): string | undefined {
  if (statement) {
    const route = getLiteralValue(statement);

    if (!route) {
      console.log(`此路径下${fullpath}，${statementName}获得的路由为空或是一个变量`);
    } else {
      return route;
    }
  }
}

/**
 * 遍历一个sourceFile下面的路由
 * @param sourceFile
 * @param fullpath 全路径
 */
export default function getRouteInNode(node: ts.Node, fullpath: string): string | undefined {
  const linkGoStatement = getExpressionArgs(node, 'Link', 'go');

  // linkGoStatement和linkToElement在一个node里只会存在一种情况
  if (linkGoStatement) {
    // linkGoStatement第一个参数就是route
    const linkGoRoute = linkGoStatement[0];
    return getRoute(linkGoRoute, 'linkGoStatement', fullpath);
  } else {
    const linkToElement = findJsxElement(node, 'Link');
    if (linkToElement) {
      const linkToStatement = getJsxElementAttr(linkToElement.element, 'to');
      return getRoute(linkToStatement, 'linkToStatement', fullpath);
    }
  }
}