import * as ts from 'typescript';
import findJsxElement, { JsxElementNode } from '../findJsxElement';
import getJsxElementAttr from '../getJsxElementAttr';
import getLiteralValue from '../getLiteralValue';
import eachNode from '../eachNode';

export interface Routes {
  /** 路由页面文件名对应的路径 */
  [filename: string]: string;
}

type JsxNodeArray = ts.NodeArray<ts.JsxOpeningElement | ts.JsxSelfClosingElement>;

/** 获取global.routes语句的值 */
function getGlobalRoutes(node: ts.Node): JsxNodeArray | undefined {
  if (node.kind === ts.SyntaxKind.ExpressionStatement) {
    const expression = node as ts.ExpressionStatement;
    const binaryExpression = expression.expression as ts.BinaryExpression;
    const left = binaryExpression.left as ts.PropertyAccessExpression;
    const leftExpression = left.expression as ts.Identifier;
    const right = binaryExpression.right as ts.ArrayLiteralExpression;

    if (leftExpression.text === 'global' && left.name.text === 'routes') {
      return right.elements as JsxNodeArray;
    }
  }
}

/**
 * 获取项目的路由映射
 * @param source
 */
export default function getAppRoutes(source: ts.SourceFile): Routes {
  const routes: Routes = {};
  let component: JsxNodeArray | undefined;
  // 先查找Switch组件，如果找到就停止遍历
  for (let i = 0; i < source.statements.length; i++) {
    getGlobalRoutes(source.statements[i]);
    if (component === undefined) {
      eachNode(source.statements[i], (node) => {
        if (component === undefined) {
          component = getGlobalRoutes(node);
        }
      });
    } else {
      break;
    }
  }

  if (component) {
    for (const route of component) {
      const pageAttr = getJsxElementAttr(route, 'component');
      const pathAttr = getJsxElementAttr(route, 'path');

      if (pageAttr && pathAttr) {
        const pageValue = (pageAttr as ts.Identifier).text;
        const pathValue = getLiteralValue(pathAttr);

        routes[pageValue as string] = pathValue as string;
      }
    }
  }

  // eachNode((switchComponent as JsxElementNode).node, (node) => {
  //   const routeComponent = findJsxElement(node, 'Route');

  //   // console.log(routeComponent)
  //   if (routeComponent) {
  //     const pageAttr = getJsxElementAttr(routeComponent.element, 'component');
  //     const pathAttr = getJsxElementAttr(routeComponent.element, 'path');

  //     if (pageAttr && pathAttr) {
  //       const pageValue = (pageAttr as ts.Identifier).text;
  //       const pathValue = getLiteralValue(pathAttr);

  //       routes[pageValue as string] = pathValue as string;
  //     }
  //   }
  // });

  return routes;
}