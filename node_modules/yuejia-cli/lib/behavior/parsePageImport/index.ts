import * as fs from 'fs';
import * as path from 'path';
import * as ts from 'typescript';
import createSourceFile from '../createSourceFile';
import eachImprots from '../eachImprots';
import readImportFile from '../readImportFile';

type Callback = (sourceFile: ts.SourceFile, fullpath: string) => void;

/**
 * 解析页面引用
 * @param filePath 文件路径
 * @param moduleSpecifier 包的路径
 */
export default function parsePageImport(filePath: string, specifier: string, callback: Callback): void {
  // 是否是scss文件
  const isScssFile = specifier.indexOf('.scss') >= 0;
  // 是否是node_moudels里的文件
  const isNodeModules = specifier.indexOf('.') < 0;
  // 文件内容
  let data;

  // 排除这2中类型的文件
  if (isScssFile === false && isNodeModules === false) {
    try {
      // 读取文件信息
      const stat = fs.statSync(filePath);
      // 页面所在目录，如果路径是文件类型就退一层
      const pageDir = stat.isFile() ? path.join(filePath, '../') : filePath;
      // 页面引入的模块的路径
      const modulePath = path.join(pageDir, specifier);
      // 读取文件内容
      const result = readImportFile(modulePath);

      if (result) {
        const { fullpath } = result;
        const sourceFile = createSourceFile(fullpath);
        data = result.data;

        callback(sourceFile, fullpath);
        // 这里是递归调用，会把page import的文件进行解析，生成sourceFile
        eachImprots(sourceFile, (childSpecifier) => {
          parsePageImport(modulePath, childSpecifier, callback);
        });
      }
    } catch (err) {
      if (data) {
        console.log(err);
      }
    }
  }
}