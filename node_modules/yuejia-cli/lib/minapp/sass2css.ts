import * as sass from 'node-sass';
import * as fs from 'fs';
import * as path from 'path';
import * as css from 'css';
import { createDirByFilePath } from '../create/dir';
// @ts-ignore
import * as stringify from 'stringify-object';
import ts2js from './ts2js';

let l = 0;
export default function sass2css(filePath: string): void {
  l++;
  const filename = `./src/${filePath}.scss`;
  sass.render({
    file: filename,
    outFile: `./dist/${filePath}.wxss`
  }, (err, result) => {
    if (!result) {
      return;
    }

    const content = result.css.toString();
    const cssAst = css.parse(content);
    fs.writeFileSync(`./sourcefile/${l}.log`, stringify(cssAst), { encoding: 'utf8' });
    const selectors: string[] = [];
    // @ts-ignore
    let typings = 'export default {\n';

    if (cssAst.stylesheet && cssAst.stylesheet.rules) {
      cssAst.stylesheet.rules.forEach((rule) => {
        const ruleSelectors = (rule as css.Rule).selectors;
        if (rule && rule.type === 'rule' && ruleSelectors) {
          ruleSelectors.forEach((item) => {
            selectors.push(item);
          });
        }
      });
    }

    selectors.forEach((item) => {
      // 只取纯选择器
      let className = item.substr(1);

      if (className.indexOf(':') > 0) {
        className = item.substr(0, className.indexOf(':'));
      } else if (className.indexOf('.') > 0) {
        className = item.substr(0,  className.indexOf('.'));
      }
      typings += `  ${className}: '${className}',\n`;
    });

    typings += '};';

    fs.writeFileSync(`./src/${filePath}.scss.ts`, typings, { encoding: 'utf8' });
    createDirByFilePath(path.normalize(`./dist/${filePath}`));
    fs.writeFileSync(`./dist/${filePath}.wxss`, content, { encoding: 'utf8' });
    ts2js(filePath + '.scss');
  });
}
