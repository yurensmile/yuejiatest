"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const fs = require("fs");
const path = require("path");
const createSourceFile_1 = require("../behavior/createSourceFile");
const getExportDefault_1 = require("../behavior/getExportDefault");
const eachNode_1 = require("../behavior/eachNode");
const dir_1 = require("../create/dir");
function replaceIdentifier(text, start, end, replaceText) {
    const before = text.substr(0, start);
    const after = text.substr(end);
    return before + replaceText + after;
}
function eachJsx(code) {
    let isOver = false;
    while (isOver === false) {
        const source = ts.createSourceFile('', code, 6, false, 4);
        let stop = false;
        for (let i = 0; i < source.statements.length; i++) {
            if (stop) {
                break;
            }
            const statement = source.statements[i];
            eachNode_1.default(statement, (childNode) => {
                if (stop === false) {
                    if (childNode.kind === ts.SyntaxKind.JsxAttribute) {
                        const identifier = childNode.name;
                        const attrValue = childNode.initializer;
                        const text = identifier.text;
                        if (text.indexOf('$wx_') >= 0) {
                            code = replaceIdentifier(code, identifier.pos, identifier.end, text.replace('$wx_', '  wx:'));
                        }
                        else if (text.indexOf('_') > 0) {
                            code = replaceIdentifier(code, identifier.pos, identifier.end, text.replace('_', '-'));
                        }
                        if (attrValue && attrValue.kind === ts.SyntaxKind.JsxExpression) {
                            const valueText = code.substr(attrValue.pos, attrValue.end - attrValue.pos);
                            code = replaceIdentifier(code, attrValue.pos, attrValue.end, `"{${valueText}}"`);
                            stop = true;
                        }
                    }
                    else if (childNode.kind === ts.SyntaxKind.ExpressionStatement) {
                        const s = childNode.pos;
                        const e = childNode.end;
                        if (code[s - 1] === '{' && code[e] === '}' && code[s - 2] !== '{' && code[e - 1] !== '}') {
                            const valueText = code.substr(s, e - s);
                            code = replaceIdentifier(code, s, e, `{${valueText}}`);
                            stop = true;
                        }
                    }
                }
            });
        }
        if (stop === false) {
            isOver = true;
        }
    }
    return code;
}
function replaceWxPorps(node, code) {
    const codeSplit = code.split('\r\n');
    let newCode = '';
    codeSplit.forEach((item, i) => {
        for (let j = 0; j < item.length; j++) {
            const charCode = item.charCodeAt(j);
            if (charCode >= 65 && charCode <= 90 &&
                (item[j - 1] === '/' && item[j - 2] === '<') ||
                (item[j - 1] === '<') ||
                (item[j - 1] === '-')) {
                item = replaceIdentifier(item, j, j + 1, item[j].toLocaleLowerCase());
            }
            else if (item[j] === '_') {
                const nextChar = item[j + 1];
                const nextCharCode = nextChar ? item.charCodeAt(j + 1) : -1;
                if (nextCharCode >= 65 && nextCharCode <= 90) {
                    item = replaceIdentifier(item, j, j + 1, '-');
                }
            }
        }
        item = eachJsx(item);
        newCode += item;
    });
    return newCode;
}
function tsx2wxml(filePath) {
    const source = createSourceFile_1.default(`./src/${filePath}.tsx`);
    const text = source.getText();
    const exportDefault = getExportDefault_1.default(source);
    if (exportDefault && exportDefault.expression && exportDefault.expression.kind === ts.SyntaxKind.JsxElement) {
        const node = exportDefault.expression;
        const code = text.substr(node.pos, node.end - node.pos);
        const newCode = replaceWxPorps(node, code);
        const fileName = filePath.replace(`${path.sep}view`, `${path.sep}index`);
        dir_1.createDirByFilePath(`./dist/${filePath}`);
        fs.writeFileSync(`./dist/${fileName}.wxml`, newCode, { encoding: 'utf8' });
    }
}
exports.default = tsx2wxml;
