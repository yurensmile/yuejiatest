import Base, { ReadOnly } from '../../_base/datatype';
const isEmpty: _.LoDashStatic['isEmpty'] = require('lodash/isEmpty');
import Request from '../request';

interface Props {
  request?: Request;
}

class ObMap<Key, Value> extends Base<Map<Key, ReadOnly<Value>>> {
  constructor(props?: Props) {
    super(props && props.request);
  }

  protected value: Map<Key, ReadOnly<Value>> = new Map();

  public set(key: Key, value: ReadOnly<Value>): void {
    this.value.set(this.stringify(key), value);

    if (this.request) {
      if (isEmpty(value)) {
        this.request.state.set('empty');
      } else {
        this.request.state.set('complete');
      }
    }

    this.updateDataId();
  }

  public get(key: Key): ReadOnly<Value> | undefined {
    return this.value.get(this.stringify(key));
  }

  /** 清空所有的数据 */
  public clear(): void {
    this.value.clear();
  }

  public keys(): IterableIterator<Key> {
    return this.value.keys();
  }
}

export default ObMap;