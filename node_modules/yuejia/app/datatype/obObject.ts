import Request from '../request';
import Base, { ReadOnly, BaseValue } from '../../_base/datatype';
import isEmpty from '../../utils/isEmpty';

export type Value<T> = T extends BaseValue ? T : T | undefined;

interface Props<T> {
  request?: Request;
  defaultValue: ReadOnly<T>;
}

/** 对象或基本类型数据 */
class ObObject<T> extends Base<T> {
  constructor(props: Props<T>) {
    super(props.request);

    this.value = props.defaultValue;
  }

  protected value: ReadOnly<T>;

  public set(value: ReadOnly<T>): void {
    this.value = value;

    if (this.request) {
      if (isEmpty(value)) {
        this.request.state.set('empty');
      } else {
        this.request.state.set('complete');
      }
    }

    this.updateDataId();
  }

  public get(): ReadOnly<T> {
    return this.value;
  }
}

export default ObObject;