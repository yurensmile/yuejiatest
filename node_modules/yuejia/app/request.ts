import yj from '../typings';
import axios, { Canceler, AxiosResponse, AxiosRequestConfig } from 'axios';
import * as assign from 'object-assign';
import { Type } from '../component/StateMachine';
import ObObject from './datatype/obObject';
const isEmpty = require('lodash/isEmpty');

export interface Event {
  /** 成功后的回调 */
  callback?: (response: yj.response, ...args: any[]) => void;
  /** 失败后的回调 */
  failback?: (err: Error) => void;
}

export interface Props extends Event {
  api?: string;
  requestData?: () => Params;
}

export interface ActionParams {
  /** 请求的参数配置 */
  config: AxiosRequestConfig;
  /** 是否需要做transformResponse处理，默认处理 */
  transformResponse?: boolean;
}

export interface Params {
  [key: string]: any;
}

interface ReadCacheParams<Data> {
  data: Data;
  /** 命中缓存 */
  hit: (data: Data) => void;
  /** 未命中缓存  */
  miss: () => void;
}

abstract class Request {
  constructor(props?: Props) {
    this.send = this.send.bind(this);

    if (props) {
      this._api = props.api;
      this._callback = props.callback;
      this._failback = props.failback;
      this.requestData = props.requestData;
    }

    this.response = this.response.bind(this);
    this.action = this.action.bind(this);
  }

  /** 发送请求 */
  public abstract send(...args: any[]): Promise<void>;
  /** 请求发送失败后的重新请求的次数 */
  private againCount: number = 0;
  /** 是否开启请求失败后重新请求 */
  protected again: boolean = false;
  /** 默认参数，用于url上的search */
  public static defaultParams: Params | undefined;
  /** 默认参数，用于post请求的data */
  public static defaultData: Params | undefined;
  /** 请求成功后的默认处理 */
  public static transformResponse: (response: yj.response) => yj.response;
  /** Content-Type是否设置为application/json */
  public static isApplicationJson: boolean = false;
  /** 取消请求 */
  public cancel: Canceler | undefined;
  /** 是否处于请求中 */
  public requesting: boolean = false;
  /** 接口地址 */
  protected readonly _api: string | undefined;
  /** 成功后的回调 */
  protected readonly _callback: Event['callback'] | undefined;
  /** 失败后的回调 */
  protected readonly _failback: Event['failback'] | undefined;
  /** 发送请求的参数 */
  public requestData: (() => Params) | undefined;
  /** 请求的状态 */
  public readonly state: ObObject<Type> = new ObObject({ defaultValue: undefined });
  /** 上一个参数 */
  private lastParams: string = '';

  /** 对请求返回后的响应做处理 */
  private response(params: ActionParams, response: AxiosResponse<yj.response>): yj.response | undefined {
    const transformResponse = params.transformResponse === undefined ? false : params.transformResponse;
    const data = response.data;
    this.requesting = false;

    if (response.status === 200) {
      if (transformResponse) {
        return Request.transformResponse(data);
      } else {
        return data;
      }
    } else {
      // 如果请求失败，就发起重新发起请求，次数最多为3次
      if (this.again && this.againCount < 3) {
        this.againCount++;
        this.action(params);
      } else {
        this.state.set('fail');
      }
    }
  }

  /** 发送请求的封装函数 */
  protected action(params: ActionParams): Promise<yj.response> {
    const { config } = params;

    // 先判断是否有缓存，如果有就读缓存，否则发起请求
    const urlSearchParams = new URLSearchParams();
    const method = config.method && config.method.toLocaleLowerCase();

    if (Request.defaultData && method === 'post') {
      const defaultData = Request.defaultData;
      Object.keys((defaultData)).forEach((key) => {
        if (defaultData[key] !== undefined) {
          urlSearchParams.append(key, (Request.defaultData as Params)[key] as string);
        }
      });
    }

    if (Request.defaultParams && method === 'get') {
      const temp: any = {};

      if (config.params) {
        Object.keys(config.params).forEach((key) => {
          const value = config.params[key];
          if (value !== undefined && typeof value !== 'function') {
            temp[key] = config.params[key];
          }
        });
      }

      config.params = assign({}, Request.defaultParams, temp);
    }

    if (config.data) {
      Object.keys((config.data)).forEach((key) => {
        const value = config.data[key];
        if (value !== undefined && typeof value !== 'function' && !urlSearchParams.has(key)) {
          urlSearchParams.append(key, config.data[key]);
        }
      });
    }

    this.requesting = true;
    return new Promise((resolve, reject) => {
      axios({
        cancelToken: new axios.CancelToken((cancel) => {
          this.cancel = cancel;
        }),
        headers: {
          'Content-Type': method === 'post' && Request.isApplicationJson === false ? 'application/x-www-form-urlencoded' : undefined
        },
        ...config,
        data: urlSearchParams,
      }).then((response) => {
        resolve(this.response(params, response));
      }).catch((err) => {
        if (err.message !== 'cancel') {
          reject(err);
          this.state.set('fail');
          throw err;
        }
      });
    });
  }

  /** 使用缓存 */
  protected async readCache<Data>(params: ReadCacheParams<Data>): Promise<void> {
    const { data, hit, miss } = params;

    // 如果数据存在使用缓存
    if (isEmpty(data)) {
      miss();
    } else {
      hit(data);
    }
  }

  /** 参数是否改变 */
  public isParamsChange(currentParams: Params): boolean {
    const currentParamsStr = JSON.stringify(currentParams);
    const isParamsChange = this.lastParams !== currentParamsStr;
    this.lastParams = currentParamsStr;
    return isParamsChange;
  }
}

export default Request;