import * as pathToRegexp from 'path-to-regexp';

interface Options {
  path?: string;
  exact?: boolean;
  strict?: boolean;
  sensitive?: boolean;
  end?: boolean;
}

interface PatternCache {
  [key: string]: any;
}

const patternCache: PatternCache = {};
const cacheLimit = 10000;
let cacheCount = 0;

const compilePath = (pattern: string, options: Options) => {
  const cacheKey = `${options.end}${options.strict}${options.sensitive}`;
  const cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

  if (cache[pattern]) {
    return cache[pattern];
  }

  const keys: any[] = [];
  const re = pathToRegexp(pattern, keys, options);
  const compiledPattern = { re, keys };

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledPattern;
    cacheCount++;
  }

  return compiledPattern;
};

/**
 * Public API for matching a URL pathname to a path pattern.
 */
const matchPath = (pathname: string, options: Options) => {
  if (typeof options === 'string') {
    options = { path: options };
  }

  const {
    path = '/',
    exact = false,
    strict = false,
    sensitive = false
  } = options;
  const { re, keys } = compilePath(path, { end: exact, strict, sensitive });
  const match = re.exec(pathname);

  if (!match) {
    return null;
  }

  const [url, ...values] = match;
  const isExact = pathname === url;

  if (exact && !isExact) {
    return null;
  }

  return {
    // the path pattern used to match
    path,
    // the matched portion of the URL
    url: path === '/' && url === '' ? '/' : url,
    // whether or not we matched exactly
    isExact,
    params: keys.reduce((memo: any, key: any, index: number) => {
      memo[key.name] = values[index];
      return memo;
    }, {})
  };
};

export default matchPath;