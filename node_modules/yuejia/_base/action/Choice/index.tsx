import * as React from 'react';

export interface Value {
  text: string;
  value?: string | number;
}
export type CallBackOnClick = (event: React.MouseEvent<HTMLDivElement>, value: Value[], index: number) => void;
// type ChildrenOnClick = (event: React.MouseEvent<HTMLDivElement>, currentValue: Value, index: number) => void;

export interface Base {
  /** 是否禁用 */
  disabled?: boolean;
  /** 是否多选 */
  multiple?: boolean;
  /** 只有1个选项并且可以开关时启用 */
  switch?: boolean;
  /** 最多可选数量 */
  max?: number;
}

interface Props extends Base {
  data: any[];
  value: Value[] | undefined;
  /** item是data遍历的项, index是遍历的索引，value是选中的值 */
  children: (item: any, index: number, value: Value[] | undefined, onClick: CallBackOnClick) => JSX.Element;
  /** value是选中的值，index是选中的索引 */
  onClick: CallBackOnClick;
}

class Choice extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.onClick = this.onClick.bind(this);
  }

  /** 格式化value */
  private formatValue(newValue: Value): Value[] {
    const { multiple, value } = this.props;

    if (multiple) {
      if (value) {
        const index = value.findIndex((item) => {
          const itemRealValue = item.value !== undefined ? item.value : item.text;
          const realNewValue = newValue.value !== undefined ? newValue.value : newValue.text;

          return itemRealValue.toString() === realNewValue.toString();
        });
        if (index >= 0) {
          value.splice(index, 1);
        } else {
          value.push(newValue);
        }

        return value;
      }
    } else if (this.props.switch) {
      // 如果开启了switch，就会有勾选或取消勾选的功能
      if (value && value.length) {
        const itemRealValue = (value[0].value ? value[0].value : value[0].text) || '';
        const realNewValue = newValue.value !== undefined ? newValue.value : newValue.text;

        return itemRealValue.toString() === realNewValue.toString() ? [] : [newValue];
      }

      return [newValue];
    } else {
      return [newValue];
    }

    return [];
  }

  private onClick(event: React.MouseEvent<HTMLDivElement>, newValue: Value[], index: number): void {
    const { onClick, disabled, multiple, value, max } = this.props;

    if (disabled) {
      return;
    }
    // 防止重复点击
    if (multiple !== true && this.props.switch !== true && value && value[0] && value[0].text === newValue[0].text)  {
      return;
    }

    if (value && ((max && value.length < max) || max === undefined)) {
      onClick(event, this.formatValue(newValue[0]), index);
    } else if (value && (max && value.length >= max) && value.findIndex((item) => item.value === newValue[0].value) >= 0) {
      onClick(event, this.formatValue(newValue[0]), index);
    }
  }

  public render(): JSX.Element[] {
    const { children, data, value } = this.props;

    return data.map((item, i) => children(item, i, value, this.onClick));
  }
}

export default Choice;