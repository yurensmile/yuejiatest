import * as React from 'react';
import * as classNames from 'classnames';
import ChoiceAction, { Base as ChoiceProps, Value, CallBackOnClick } from '../../action/Choice';
import { Props as IconTextProps, Icon } from '../../view/IconText';
import TabItem, { Base as TabItemProps } from '../../view/TabItem';
import { Props as ContainerProps } from '../../../component/Container';

export interface Data {
  icon?: Icon;
  text: string;
  value?: string | number;
}

export interface Base extends ChoiceProps, ContainerProps, TabItemProps {
  data: Data[];
  /** 单个选项的样式 */
  itemCls?: string;
  /** 选项被选中的样式 */
  activeCls?: string;
  activeStyle?: React.CSSProperties;
  /** 图标样式 */
  iconCls?: IconTextProps['iconCls'];
  /** 文本样式 */
  textCls?: IconTextProps['textCls'];
  /** 是否添加省略号 */
  ellipsis?: IconTextProps['ellipsis'];
}

interface Props extends Base {
  value: Value[] | undefined;
  onClick: CallBackOnClick;
}

function isActive(currentValue: Value[] | undefined, item: Data): boolean {
  if (currentValue) {
    const index = currentValue.findIndex((itemValue) => {
      const value = item.value !== undefined ? item.value : item.text;
      const itemRealValue = itemValue ? (itemValue.value !== undefined ? itemValue.value : itemValue.text) : '';

      return itemRealValue.toString() === value.toString();
    });
    return index >= 0;
  }
  return false;
}

const Choice = (props: Props) => {
  const { data, value, onClick, multiple, itemCls, activeCls, disabled, max, activeStyle, style } = props;

  return (
    <ChoiceAction
      data={data}
      value={value}
      onClick={onClick}
      multiple={multiple}
      switch={props.switch}
      disabled={disabled}
      max={max}
    >
      {(item: Data, index, currentValue, tabOnClick) => {
        const active = isActive(currentValue, item);
        return (
          <TabItem
            {...props}
            key={item.text + index}
            className={classNames(itemCls, {
              [activeCls || '']: active
            })}
            style={active ? activeStyle : style}
            icon={item.icon}
            value={item}
            text={item.text}
            active={active}
            index={index}
            onClick={(e, text) => tabOnClick(e, [item], index)}
          />
        );
      }}
    </ChoiceAction>
  );
};

export default Choice;