import Request from '../app/request';
import Model from '../component/Model';

export type BaseValue = number | string | boolean | Date | any[] | ((...args: any[]) => any) | Map<any, any>;
export type ReadOnly<T> = T extends BaseValue ? T : {
  readonly [P in keyof T]: ReadOnly<T[P]>;
};

export interface Props<Value> {
  request?: Request;
  defaultValue?: Value;
}

/** 数据类型基类 */
abstract class DataType<Value> {
  constructor(request?: Request) {
    this.request = request;
  }

  /** 数据更新的id，用于判断数据是否发生变化 */
  private dataId: number = 0;
  private lastDataId: number = 0;
  protected request: Request | undefined;

  protected abstract value: any;
  public abstract set(...arg: any[]): void;
  public abstract get(...arg: any[]): any;

  /** 更新数据id */
  protected updateDataId(): void {
    this.dataId++;
    if (Model.dispatch) {
      Model.dispatch();
    }
  }

  /** 数据是否改变，为true则是改变, */
  /** 特别注意：这个方法有副作用，调用一次后将一直返回false，除非再次调用updateDataId */
  public get isChange(): boolean {
    if (this.dataId !== this.lastDataId) {
      this.lastDataId = this.dataId;
      return true;
    }
    return false;
  }

  protected stringify(key: any): any {
    if (typeof key === 'object') {
      return JSON.stringify(key);
    } else {
      return key;
    }
  }

  /** 获取数据id */
  public getDataId(): number {
    return this.dataId;
  }
}

export default DataType;