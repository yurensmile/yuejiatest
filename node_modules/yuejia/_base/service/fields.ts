import validate from '../../utils/validate';
import FormService from '../../component/Form/service';
import ObObject from '../../app/datatype/obObject';
import DataType from '../../_base/datatype';
import isEmpty from '../../utils/isEmpty';

export interface BaseProps<Value> {
  /** 提交的JSON Key值 */
  fieldKey: string;
  /** 字段显示的名称 */
  fieldName: string;
  /** 初始值 */
  defaultValue?: Value;
  /** 默认提示文字，会覆盖内置的提示 */
  prompt?: string;
  /** 获取表单模型 */
  form?: () => FormService;
  /** 是否必填 */
  required?: boolean;
  /** 自定义验证函数，或者从内置函数中选择 */
  validate?: ((value: Value) => boolean) | keyof typeof validate;
  /** value改变事件 */
  onChange?: (value: Value) => void;
}

export type State = 'empty' | 'fail' | 'complete';

abstract class Fields<Value> {
  constructor(props: BaseProps<Value>) {
    this.fieldKey = props.fieldKey;
    this.fieldName = props.fieldName;
    this.required = props.required || false;
    this.prompt = new ObObject({ defaultValue: props.prompt || ''});
    this.getForm = props.form;
    // tslint:disable-next-line:prefer-conditional-expression
    if (typeof props.validate  === 'string') {
      this.verification = validate[props.validate] as ((value: any) => boolean);
    } else {
      this.verification = props.validate;
    }
    this.onChange = props.onChange;

    this.setPrompt = this.setPrompt.bind(this);
    this.validate = this.validate.bind(this);
    this.clear = this.clear.bind(this);
    this.changeValue = this.changeValue.bind(this);
    this.getPrompt = this.getPrompt.bind(this);
  }

  /** 表单模型 */
  protected getForm: BaseProps<Readonly<Value>>['form'] | undefined;
  /** 验证函数的方法名 */
  private verification: ((value: Value) => boolean) | undefined;
  /** value改变事件 */
  private onChange: ((value: Value) => void) | undefined;
  /** 字段中文名称 */
  private fieldName: string;
  /** 上一次验证的值 */
  private lastValidate: boolean = false;
  /** 值 */
  public abstract readonly value: DataType<Value>;
  /** 用于覆盖默认的prompt */
  private prompt: ObObject<string>;
  /** json key值 */
  public readonly fieldKey: string;
  /** 是否必填 */
  public readonly required: boolean | undefined;
  /** 输入状态 */
  public get state(): State {
    const value = this.value.get();

    if (this.required) {
      if (isEmpty(value)) {
        return 'empty';
      }
    }

    if (this.validate()) {
      return 'fail';
    } else {
      return 'complete';
    }
  }

  /** 设置提示文字 */
  public setPrompt(text: string): void {
    if (this.getPrompt() !== text) {
      this.prompt.set(text);
    }
  }

  /** 提示文字 */
  public getPrompt(): string {
    const prompt = this.prompt.get();

    if (prompt) {
      return prompt;
    } else {
      if (this.state === 'empty') {
        return `${this.fieldName}必填`;
      } else if (this.state === 'fail') {
        return `${this.fieldName}格式不正确`;
      } else {
        return '';
      }
    }
  }

  /**
   * 输入验证函数
   * 为true表示有错误，为false表示无错误
   */
  public validate(): boolean {
    if (this.value.isChange) {
      const value = this.value.get();
      // 判断是否有自定义验证函数
      // tslint:disable-next-line:prefer-conditional-expression
      if (value && this.verification !== undefined) {
        this.lastValidate = !this.verification(value);
      } else {
        this.lastValidate = false;
      }
    }
    // 判断有没有验证函数，没有的话就不需要验证
    return this.lastValidate;
  }

  /** 清空数据状态 */
  public abstract clear(): void;

  /** 对值改变时做一些联动处理 */
  public changeValue(value: Value): void {
    this.value.set(value);
    this.validate();

    if (this.onChange) {
      this.onChange(value);
    }
  }
}

export default Fields;