import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import Popup from '../Popup';
import Container from '../Container';
import IconText from '../IconText';
import Choice from '../Choice';
import { Data as DataItem } from '../../_base/component/Choice';
import { Value } from '../../_base/action/Choice';
import ChoiceService from '../Choice/service';
import PageStack from '../PageStack';
import sheet, { DetailParams } from '../../model/behavior/sheet';
import svgRootPath from '../../utils/svgRootPath';
import VerticalScroll from '../VerticalScroll';
import './index.scss';
const upSvg = svgRootPath + require('../../assets/up.svg').id;
const downSvg = svgRootPath + require('../../assets/down.svg').id;

export interface Data {
  label: string;
  options: DataItem[];
}

export interface Props extends yj.ComponentProps, BaseItemProps {
  service?: ChoiceService[];
  /** 选项的数据 */
  data: Data[];
  /** 选中标签的样式 */
  activeLabelCls?: string;
  /** 选中选项的样式 */
  activeChoiceCls?: string;
  /** popup contentCls */
  contentMaskCls?: string;
  /** 关闭时触发 */
  onClose?: () => void;
  /** z-index */
  zIndex?: number;
  /** popup容器上的id */
  popupId?: string;
  /** top的位置是否不变 */
  topConstant?: boolean;
}

interface State {
  /** 选中的label */
  selected: number | undefined;
}

interface BaseItemProps {
  /** 弹出框样式 */
  popupCls?: string;
  /** 选中图标的样式 */
  iconCls?: string;
}

const prefixCls = 'yj-component-filter';

class Filter extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.elemRef = React.createRef();
    this.setSelected = this.setSelected.bind(this);
    this.onClose = this.onClose.bind(this);
  }

  public state: State = {
    selected: undefined
  };
  private elemRef: React.RefObject<HTMLDivElement>;
  private lastTop: number = 0;

  /** 计算popup要偏移的top值 */
  private calcPopupTop(): number {
    if (this.lastTop) {
      return this.lastTop;
    }

    const elemRef = this.elemRef.current;
    // 防止在render时读取
    if (elemRef) {
      const offsetTop = elemRef.offsetTop;
      const height = elemRef.clientHeight;
      this.lastTop = height + offsetTop;
      return this.lastTop;
    }

    return 0;
  }

  private setSelected(index: number | undefined): void {
    this.setState({
      selected: index
    });
  }

  /** Popup关闭时触发 */
  private onClose(e: React.MouseEvent<HTMLDivElement>, value: Value[], index: number, visible: boolean): void {
    const { onClose } = this.props;

    if (visible !== true) {
      const stackComponent = PageStack.getStackComponent();
      const action = sheet.Filter.action[0];
      const selected = this.state.selected as number;
      const choice = value[0];
      if (stackComponent && selected >= 0) {
        stackComponent.behavior.trigger<DetailParams['Filter']>({
          actionName: `${action}-${this.props.data[selected].label}`,
          detailedData: {
            value: (choice && choice.value) as string,
            text: choice && choice.text,
          }
        });
      }

      this.setState({
        selected: undefined
      });

      if (onClose) {
        onClose();
      }
    }
  }

  /** 防止选择的时候关闭蒙层 */
  private preventDefault(e: React.MouseEvent<HTMLDivElement>): void {
    e.preventDefault();
    e.stopPropagation();
  }

  public render(): JSX.Element {
    const { className, style, activeLabelCls, activeChoiceCls, popupCls, iconCls, service, contentMaskCls, zIndex, popupId } = this.props;
    const { selected } = this.state;
    const data = this.props.data;

    return (
      <React.Fragment>
        <div
          key="Container"
          className={classNames(prefixCls, className)}
          style={style}
          ref={this.elemRef}
        >
          {data.map((item, i) => {
            const value = service && service[i].value.get()[0];
            return (
              <Container
                className={classNames({
                  [activeLabelCls || '']: selected === i
                })}
                key={item.label}
                alignItems="center"
                justifyContent="center"
                flex={1}
                onClick={() => this.setSelected(i)}
              >
                <IconText
                  className={classNames({
                    [`${prefixCls}-active`]: selected === i
                  })}
                  iconCls={`${prefixCls}-arrow`}
                  textCls={`${prefixCls}-label`}
                  src={selected === i ? upSvg : downSvg}
                  // text={item.label}
                  text={value && value.value ? value.text : item.label}
                  flexDirection="row-reverse"
                />
              </Container>
            );
          }
          )}
        </div>
        <Popup
          key="Popup"
          id={popupId}
          contentCls={classNames(`${prefixCls}-maskContent`, contentMaskCls)}
          visible={selected !== undefined}
          animation={false}
          onClose={this.onClose}
          style={{ zIndex }}
          closable
          componentName="筛选器"
        >
          <Popup.Content>
            <VerticalScroll>
              <div
                className={classNames(`${prefixCls}-popup`, popupCls)}
                style={{ top: this.calcPopupTop() }}
                onClick={this.preventDefault}
              >
                {selected !== undefined && selected >= 0 ? (
                  <Choice
                    service={service && service[selected]}
                    data={data[selected].options}
                    iconCls={classNames(`${prefixCls}-choice-icon`, iconCls)}
                    activeCls={classNames(`${prefixCls}-choice-checked`, activeChoiceCls)}
                    itemCls={`${prefixCls}-choice-item`}
                    textCls={`${prefixCls}-choice-text`}
                    onClick={(e, value: Value[], index: number) => this.onClose(e, value, index, false)}
                  />
                ) : null}
              </div>
            </VerticalScroll>
          </Popup.Content>
        </Popup>
      </React.Fragment>
    );
  }
}

export default Filter;