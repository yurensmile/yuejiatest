import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import Service from './service';
import global from '../../app/global';
import './index.scss';

interface Props extends yj.ComponentProps {
  service?: Service;
  /** textarea rows */
  rows?: number;
  /** 是否自动增长高度 */
  auto?: boolean;
  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>, value: string) => void;
  disabled?: boolean;
  placeholder?: string;
  maxLength?: number;
  wordCount?: boolean;
  wordCountCls?: string;
}

interface State {
}

const prefixCls = 'yj-component-textarea';
class Textarea extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.onKeyUp = this.onKeyUp.bind(this);
    this.onChange = this.onChange.bind(this);
  }

  public static defaultProps: Props = {
    auto: false,
    rows: 5,
  };

  /** refs pre HTMLElement */
  private preRef: HTMLPreElement | undefined;

  public componentDidMount(): void {
    const { service } = this.props;
    const value = service && service.value.get();

    if (value && this.preRef) {
      this.preRef.textContent = value;
    }
  }

  // // todo: 这里声明周期需要修改
  // public componentWillReceiveProps(nextProps: Props): void {
  //   if (this.props.service !== nextProps.service) {
  //     const value = this.props.service && this.props.service.value.get();
  //     const nextValue = nextProps.service && nextProps.service.value.get();
  //     if (value && nextValue && this.preRef) {
  //       this.preRef.textContent = nextValue;
  //     }
  //   }
  // }

  public onKeyUp(e: React.KeyboardEvent<HTMLTextAreaElement>): void {
    if (this.props.auto && this.preRef) {
      if (e.keyCode === 13) {
        this.preRef.textContent += ' ';
      }
    }
  }

  public onChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {
    const { onChange, service } = this.props;
    const value = e.target.value;

    if (service) {
      global.inputFoucs = true;
      service.changeValue(value);
    }

    if (onChange) {
      onChange(e, value);
    }

    if (this.props.auto && this.preRef) {
      this.preRef.textContent = value;
    }
  }

  // public onBlur = () => {
  //   if (this.props.onBlur) {
  //     this.props.onBlur(this.props.value || '');
  //   }
  // }

  public render(): JSX.Element {
    const props = this.props;
    const { auto, id, className, disabled, service, placeholder, rows, wordCount, wordCountCls } = props;
    const value = service && service.value.get() || '';
    const maxLength = props.maxLength;

    return (
      <div className={classNames(`${prefixCls}-wrap`, className)}>
        {auto ? (
          <pre
            className={classNames({
              [`${prefixCls}-hidecode`]: auto,
              [`${prefixCls}-hidecode-hidden`]: !auto,
            })}
            ref={(el: HTMLPreElement) => this.preRef = el}
          />
        ) : null}
        <textarea
          id={id}
          className={classNames(prefixCls, {
            [`${prefixCls}-disabled`]: disabled,
            [`${prefixCls}-auto`]: auto
          })}
          placeholder={placeholder}
          value={value}
          maxLength={maxLength}
          disabled={disabled}
          onChange={this.onChange}
          // onBlur={this.onBlur}
          onKeyUp={this.onKeyUp}
          rows={rows}
        />
        {wordCount ? (
          <div className={classNames(`${prefixCls}-wordcount`, wordCountCls)}>{value.length}/{maxLength}</div>
        ) : null}
      </div>
    );
  }
}

export default Textarea;
