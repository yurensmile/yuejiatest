import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import { Props as KeyboardProps } from '../Keyboard';
import Custom, { Base as CustomBaseProps } from './Custom';
import global from '../../app/global';
import './index.scss';

interface Props extends yj.ComponentProps, CustomBaseProps {
  type?: KeyboardProps['type'] | ('text' | 'password' | 'htmlTel');
  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;
  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
  /** 数字键盘的确认事件 */
  onConfirm?: (value: string) => void;
}

interface State {
  lineHeight: number | string | undefined;
}

const prefixCls = 'yj-component-input';
class Input extends React.Component<Props> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.inputRef = React.createRef();
    this.onChange = this.onChange.bind(this);
    this.onFocus = this.onFocus.bind(this);
  }

  public static defaultProps: Props = {
    type: 'text',
    placeholder: '请输入'
  };

  public state: State = {
    lineHeight: '1'
  };

  private inputRef: React.RefObject<HTMLInputElement>;

  public componentDidMount(): void {
    this.setLineHeight();
  }

  /**
   *  input如果没有设置高度，会在字体大小的基础上增加上下2px，我猜测目的是为了防止字体被遮掉，显示不全
   *  如果不设置高度，在IOS上会有个问题就是line-height没有设置正确的情况下，placeholder不会居中
   *  最佳实践： 不要给input设置高度，只设置字体大小，但要注意他会有上下2px的间距，padding对这个间距不起作用
   */
  private setLineHeight(): void {
    if (this.inputRef.current) {
      const lineHeight = parseFloat(getComputedStyle(this.inputRef.current).fontSize || '12') + 4;

      this.setState({ lineHeight: lineHeight + 'px' });
    }
  }

  private onChange(e: React.ChangeEvent<HTMLInputElement>): void {
    const { service } = this.props;
    const value = e.target.value;

    if (service && service.changeValue) {
      global.inputFoucs = true;
      service.changeValue(value);
    }
  }

  private onFocus(e: React.FocusEvent<HTMLInputElement>): void {
    if (this.inputRef.current) {
      this.inputRef.current.scrollIntoView(false);
    }

    if (this.props.onFocus) {
      this.props.onFocus(e);
    }
  }

  public render(): JSX.Element {
    const { type, placeholder, disabled, onBlur, service, maxLength, className, id, style, onConfirm } = this.props;
    const commonProps = { placeholder, disabled, service, maxLength };
    const value = service && service.value.get() || '';
    let render!: JSX.Element;

    if (type === 'text' || type === 'password' || type === 'htmlTel') {
      render = (
        <input
          {...commonProps}
          className={classNames(prefixCls, className, {
            [`${prefixCls}-disabled`]: disabled
          })}
          id={id}
          style={style}
          type={type === 'htmlTel' ? 'tel' : type}
          autoComplete={type === 'password' ? 'new-password' : undefined}
          onChange={this.onChange}
          onFocus={this.onFocus}
          onBlur={onBlur}
          value={value}
          ref={this.inputRef}
        />
      );
    } else {
      render = (
        <Custom
          {...commonProps}
          className={className}
          type={type as KeyboardProps['type']}
          onConfirm={onConfirm}
          value={value || ''}
        />
      );
    }

    return render;
  }
}

export default Input;