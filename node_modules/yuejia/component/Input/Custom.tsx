import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import Service from './service';
import Keyboard, { Props as KeyboardProps } from '../Keyboard';
import Popup from '../Popup';
// import getNumberByComputed from '../../utils/getNumberByComputed';

export interface Base {
  service?: Service;
  disabled?: boolean;
  placeholder?: string;
  maxLength?: KeyboardProps['maxLength'];
}

interface Props extends yj.ComponentProps, Base {
  type: KeyboardProps['type'];
  confirmLabel?: KeyboardProps['confirmLabel'];
  value: string;
  onConfirm?: (value: string) => void;
}

interface State {
  /** 显示的值 */
  value: string;
  /** 是否处于焦点中 */
  visible: boolean;
  lineHeight: number | string | undefined;
}

const prefixCls = 'yj-component-input';
class Custom extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.elemRef = React.createRef();
    this.onChange = this.onChange.bind(this);
    this.onClose = this.onClose.bind(this);
    this.onVisible = this.onVisible.bind(this);
    this.onMaskClose = this.onMaskClose.bind(this);
  }

  public static defaultProps: Props = {
    value: '',
    disabled: false,
    type: 'number'
  };

  public state: State = {
    value: this.props.value,
    visible: false,
    lineHeight: undefined
  };

  private elemRef: React.RefObject<HTMLDivElement>;

  // public componentDidMount(): void {
  //   this.setLineHeight();
  // }

  public componentDidUpdate(prevProps: Props): void {
    if (this.props.value !== prevProps.value) {
      this.setState({
        value: this.props.value
      });
    }
  }

  // private setLineHeight(): void {
  //   if (this.elemRef.current) {
  //     const lineHeight = getNumberByComputed(getComputedStyle(this.elemRef.current).lineHeight);
  //     const fontSize = getNumberByComputed(getComputedStyle(this.elemRef.current).fontSize);
  //     if (fontSize && !lineHeight) {
  //       this.setState({
  //         lineHeight: fontSize + 'px'
  //       });
  //     }
  //   }
  // }

  private onChange(value: string): void {
    this.setState({ value });
  }

  private onClose(): void {
    const { service } = this.props;

    this.setState({
      value: service && service.value.get() || '',
      visible: false
    });
  }

  private onVisible(): void {
    this.setState({
      visible: true,
    });
  }

  private onMaskClose(): void {
    if (this.props.service) {
      this.props.service.changeValue(this.state.value);
    }

    if (this.props.onConfirm) {
      this.props.onConfirm(this.state.value);
    }

    this.setState({
      visible: false,
    });
  }

  public render(): JSX.Element {
    const { placeholder, disabled, type, className, style, confirmLabel, maxLength } = this.props;
    const { visible } = this.state;
    const value = this.state.value;

    return (
      <Popup
        visible={visible}
        contentCls={`${prefixCls}-keyboard`}
        maskCls={`${prefixCls}-mask`}
        onClose={this.onMaskClose}
        closable
      >
        <Popup.Button className={className} disabled={disabled} onClick={this.onVisible}>
          <div
            className={prefixCls}
            // style={{
            //   lineHeight: this.state.lineHeight,
            //   ...style
            // }}
            style={style}
            ref={this.elemRef}
          >
            {!value && <div className={`${prefixCls}-placeholder`}>{placeholder}</div>}
            <div className={`${prefixCls}-custom`}>
              <div
                className={classNames(`${prefixCls}-custom-value`, {
                  [`${prefixCls}-custom-focus`]: visible,
                  [`${prefixCls}-disabled`]: disabled
                })}
                // style={{
                //   display: 'inline-block'
                // }}
              >{value}</div>
            </div>
          </div>
        </Popup.Button>
        <Popup.Content>
          <Keyboard
            onChange={this.onChange}
            onConfirm={this.onMaskClose}
            onClose={this.onClose}
            confirmLabel={confirmLabel}
            maxLength={maxLength}
            type={type}
            value={value || ''}
          />
        </Popup.Content>
      </Popup>
    );
  }
}

export default Custom;
