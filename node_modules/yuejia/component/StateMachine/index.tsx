import * as React from 'react';
// import { ReadOnly } from '../../_base/datatype';
import Loading from './Loading';
import Complete from './Complete';
import Fail from './Fail';
import Empty from './Empty';

/** 状态类型 */
export type Type = 'complete' | 'empty' | 'fail'  | 'loading' | undefined;

export interface BaseProps {
  /** 加载视图的样式 */
  loadingStyle?: React.CSSProperties;
}

interface Props extends BaseProps {
  /** 当前的状态类型 */
  state: Type;
  children?: any;
}

interface State {
  /** 渲染的状态视图 */
  render: JSX.Element | null;
  lastState: Type;
  /** 被渲染的次数，用于判断第一次的渲染状态 */
  renderCount: number;
}

/** 获取状态渲染视图 */
function getStateRender(props: Props): State['render'] {
  let render: React.ReactElement<HTMLDivElement, typeof Complete | typeof Empty | typeof Loading | typeof Fail> | null = null;

  // 根据当前状态赋予对应的视图
  React.Children.forEach(props.children, (child) => {
    if (render === null) {
      const childElement = child as React.ReactElement<HTMLDivElement, typeof Complete | typeof Empty | typeof Loading | typeof Fail>;
      const type = childElement && childElement.type;
      if (
        (props.state === 'complete' && type === Complete) ||
        (props.state === 'empty' && type === Empty) ||
        (props.state === 'fail' && type === Fail) ||
        (props.state === 'loading' && type === Loading)
      ) {
        render = childElement;
      }
    }
  });

  // 如果children里没有声明Loading视图就使用默认的
  if (!render && props.state === 'loading') {
    render = <StateMachine.Loading style={props.loadingStyle} />;
  }
  return render;
}

function getCompleteRender(props: Props): State['render'] | null {
  let render = null;
  React.Children.forEach(props.children, (child) => {
    const childElement = child as React.ReactElement<HTMLDivElement, typeof Complete>;
    if (childElement && childElement.type === Complete) {
      render = childElement;
    }
  });

  return render;
}

/** 有限状态机 */
class StateMachine extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);
  }

  public state: State = {
    render: null,
    lastState: this.props.state,
    renderCount: 0
  };

  /** 成功的视图 */
  public static Complete: typeof Complete = Complete;
  /** 失败的视图 */
  public static Fail: typeof Fail = Fail;
  /** 加载中的视图 */
  public static Loading: typeof Loading = Loading;
  /** 数据为空的视图 */
  public static Empty: typeof Empty = Empty;

  public static getDerivedStateFromProps(nextProps: Props, prevState: State): State | null {
    if (
        (prevState.lastState !== nextProps.state) ||
        (prevState.renderCount === 0 && prevState.lastState === nextProps.state)
    ) {
      return {
        render: getStateRender(nextProps),
        lastState: nextProps.state,
        renderCount: prevState.renderCount + 1
      };
    } else if (prevState.lastState === nextProps.state && nextProps.state === 'complete') {
      return {
        render: getCompleteRender(nextProps),
        lastState: nextProps.state,
        renderCount: prevState.renderCount + 1
      };
    }
    return null;
  }

  public render(): JSX.Element | null {
    return this.state.render;
  }
}

export default StateMachine;