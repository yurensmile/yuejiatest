import yj from '../../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import { OnGeolocationParams } from '../service/geolocation';
import StateMachine, { BaseProps as StateBaseProps } from '../../StateMachine';
import { ChildrenProps } from '../index';
import sheet, { getActionName, DetailParams } from '../../../model/behavior/sheet';
import PageStack from '../../PageStack';

export interface Props extends yj.ComponentProps, ChildrenProps, StateBaseProps, yj.ComponentBehavior {
  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
  /** 当定位完成时的回调 */
  onGeolocation?: OnGeolocationParams;
  /** 是否使用定位缓存 */
  cache?: boolean;
}

const prefixCls = 'yj-component-map-location';
class Location extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.callback = this.callback.bind(this);
  }

  public static displayName: string = 'Location';

  private callback(gr: BMap.GeocoderResult): void {
    const stackComponent = PageStack.getStackComponent();

    if (stackComponent) {
      stackComponent.behavior.trigger<DetailParams['Location']>({
        actionName: getActionName(sheet.Location, 0, this.props),
        detailedData: {
          province: gr.addressComponents.province,
          city: gr.addressComponents.city,
          district: gr.addressComponents.district,
          lat: gr.point.lat,
          lng: gr.point.lng
        }
      });
    }

    if (this.props.onGeolocation && this.props.onGeolocation.callback) {
      this.props.onGeolocation.callback(gr);
    }
  }

  public componentDidMount(): void {
    const { service, onGeolocation } = this.props;

    if (service) {
      const geolocation = service.geolocation;
      geolocation.callback = this.callback;

      if (onGeolocation) {
        geolocation.failback = onGeolocation.failback;

        if (onGeolocation.timeout) {
          geolocation.timeout = onGeolocation.timeout;
        }
      }

      if (geolocation.address.get() === undefined) {
        geolocation.location(this.props.cache);
      }
    }
  }

  public render(): JSX.Element | null {
    const { className, style, children, loadingStyle, onClick, service } = this.props;

    return children ? (
      <div
        className={classNames(prefixCls, className)}
        style={style}
        onClick={onClick}
      >
        <StateMachine
          state={service && service.geolocation.state.get() || 'complete'}
          loadingStyle={loadingStyle}
        >{children}</StateMachine>
      </div>
    ) : null;
  }
}

export default Location;