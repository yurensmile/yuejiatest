import yj from '../../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import Service, { MapMarker } from '../service';
import { ChildrenProps } from '../index';
import { Data, Base as ChoiceProps } from '../../../_base/component/Choice';
import Choice from '../../Choice';
import { Props as IconTextProps } from '../../../_base/view/IconText';
import { Props as ItemProps } from './Item';
import HorizontalScroll from '../../HorizontalScroll';
import Toast from '../../Toast';
import MarkerService from '../service/marker';
import { Value } from '../../../_base/action/Choice';
import './index.scss';

export interface Props extends yj.ComponentProps, ChildrenProps, yj.ComponentBehavior {
  children: JSX.Element[];
  activeCls?: ChoiceProps['activeCls'];
  iconCls?: IconTextProps['iconCls'];
  textCls?: IconTextProps['textCls'];
  /** 是否有滚动条 */
  scroll?: boolean;
}

const prefixCls = 'yj-component-map-tab';
class Tab extends React.Component<Props> {
  constructor(props: Props) {
    super(props);
    this.onClick = this.onClick.bind(this);
  }

  /** 本地搜索 */
  private local!: BMap.LocalSearch;

  public componentDidMount(): void {
    const { map, service } = this.props;

    if (map && service) {
      this.local = this.createLocal(map, service);
    }
  }

  private createLocal(map: BMap.Map, service: Service): BMap.LocalSearch {
    // 搜索的次数
    let count = 0;
    return new BMap.LocalSearch(map, {
      renderOptions: {
        selectFirstResult: false,
      },
      pageCapacity: 100,
      onSearchComplete: (result: BMap.LocalResult) => {
        const numPois = result.getCurrentNumPois();
        const choice = service.supporting.choice.value.get() as Value[];
        const key = choice[0].text;
        // 半径默认值为1000
        const radius = service.supporting.radius.get(key) as number;

        // 如果搜索结果不满最低个数，则扩大搜索半径，并且搜索次数小于5
        if (numPois < 5 && count < 5) {
          count++;
          this.searchNearby(key);
        } else {
          count = 0;
          this.setCricle(service, radius + 300);
          this.setMarker(map, service, key, result);
          Toast.close();
        }
      }
    });
  }

  /** 设置周边配套的标准 */
  public setMarker(map: BMap.Map, service: Service, tab: string, result: BMap.LocalResult): void {
    const numPois = result.getCurrentNumPois();
    const count = numPois > 10 ? 10 : numPois;
    const markers = [];
    const supportingMarker = service.supportingMarker.get();

    for (let i = 0; i < count; i++) {
      const poi = result.getPoi(i);
      const point = poi.point;
      const marker = new MarkerService();

      marker.init(map, point, poi);
      markers.push(marker);
      marker.setWalkingRoute(map, service.center.mapPoint as BMap.Point, point);
    }
    // console.log(markers)
    // markers.sort((a, b) => {
    //   console.log(a.distance.get(), b.distance.get())
    //   return a.distance.get() - b.distance.get();
    // });
    // console.log(markers)

    if (supportingMarker) {
      (supportingMarker as MapMarker).set(tab, markers);
    }
  }

  private onClick(e: React.MouseEvent<HTMLDivElement>, item: Value[]): void {
    const { service, map } = this.props;

    if (service && map && service.center.mapPoint) {
      const activeTab = item[0].text.toString();
      const supportingMarker = service.supportingMarker.get();
      const markers = supportingMarker && (supportingMarker as MapMarker).get(activeTab);

      if ((markers && markers.length === 0) || markers === undefined) {
        Toast.loading('搜索中...');
        this.searchNearby(activeTab);
      } else {
        const radius = service.supporting.radius.get(activeTab) as number;
        this.setCricle(service, radius);
      }
      map.panTo(service.center.mapPoint);
      service.activeMarker.set(service.center);
    }
  }

  /** 搜索附近 */
  private searchNearby(key: string): void {
    const { service } = this.props;
    if (service && this.local) {
      const radius = service.supporting.radius.get(key) || 1000;
      const mapPoint = service.center.mapPoint as BMap.Point;
      this.local.searchNearby(key, mapPoint, radius);
      service.supporting.radius.set(key, radius + 1000);
    }
  }

  private setCricle(service: Service, radius: number): void {
    service.center.setCricle(radius + 300);
  }

  public render(): JSX.Element | JSX.Element[] {
    const { scroll, className, iconCls, textCls, activeCls, service, map, componentName } = this.props;
    const data: Data[] = [];
    const children = React.Children.map(this.props.children, (child) => {
      const childElement = child as React.ReactElement<ItemProps>;
      const chilProps = childElement.props;
      const itemProps: ChildrenProps = { service, map };
      data.push({
        icon: chilProps.icon,
        text: chilProps.text
      });

      return React.cloneElement(child as React.ReactElement<ChildrenProps>, itemProps);
    });
    const choice = [
      <Choice
        key="Choice"
        itemCls={classNames(prefixCls, className, {
          [`${prefixCls}-scroll`]: scroll,
          [`${prefixCls}-noscroll`]: !scroll
        })}
        activeCls={classNames(`${prefixCls}-active`, activeCls)}
        iconCls={classNames(`${prefixCls}-icon`, iconCls)}
        textCls={classNames(`${prefixCls}-text`, textCls)}
        data={data}
        service={service && service.supporting.choice}
        onClick={this.onClick}
        componentName={componentName}
        tab
      />,
      <div key="children">{children}</div>
    ];

    return scroll ? <HorizontalScroll>{choice}</HorizontalScroll> : choice;
  }
}

export default Tab;