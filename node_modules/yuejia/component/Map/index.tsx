/// <reference path="../../typings/baidumap-web-sdk/index.d.ts" />

import yj from '../../typings/index';
import * as React from 'react';
import * as classNames from 'classnames';
import Service from './service';
import Container from '../Container';
import env from '../../utils/env';
import './index.scss';

export interface ChildrenProps {
  service?: Service;
  map?: BMap.Map;
}

interface Props extends yj.ComponentProps {
  children?: JSX.Element | JSX.Element[];
  service?: ChildrenProps['service'];
  /** 地图脚本加载完成事件 */
  onReady?: (map: BMap.Map) => void;
  /** 地图加载完成 */
  onLoad?: (map: BMap.Map) => void;
  /** 每次地图绘制完成事件 */
  onTilesloaded?: (map: BMap.Map) => void;
  /** 地图点击事件 */
  onClick?: (map: BMap.Map) => void;
  /** 地图触摸事件 */
  onTouchstart?: (map: BMap.Map) => void;
  /** 是否渲染地图 */
  render?: boolean;
  /** 是否去除百度的LOGO */
  removeLogo?: boolean;
  /** 是否显示权限提示 */
  tips?: boolean;
  /** 地图脚本加载的最大时间，单位ms */
  scriptLoadMaxTime?: number;
  /** 地图脚本加载超时的事件 */
  onOverTime?: () => void;
  geolocation?: false;
}

interface State {
  load: boolean;
}

interface ExtendWindow extends Window {
  _onBMapScriptLaoded: () => void;
}

declare const window: ExtendWindow;

const ak = env === 'development' ? 'b4SFyojdFlHAHNdxYQwikwdjGzu87bq8' : 'VNtg1zrICNHqeTLi0z0kxFjbq9Gqzy3z';
const prefixCls = 'yj-component-map';
class Map extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.elemRef = React.createRef();
    this.onScripteLaoded = this.onScripteLaoded.bind(this);
    this.onTilesloaded = this.onTilesloaded.bind(this);
    this.onClick = this.onClick.bind(this);
    this.onTouchstart = this.onTouchstart.bind(this);
  }

  public static defaultProps: Props = {
    render: true,
    removeLogo: true,
    tips: true
  };

  public state: State = {
    /** 是否加载了百度地图的脚本 */
    load: false,
  };

  private elemRef: React.RefObject<HTMLDivElement>;
  private map: BMap.Map | undefined;
  /** 组件是否卸载 */
  private unmount: boolean = false;
  /** 百度logo是否存在 */
  private hasLogo: boolean = true;
  /** 地图加载的定时器 */
  private loadTimer: NodeJS.Timer | number | undefined;
  /** 是否触发了onload的方法 */
  private isTriggerOnLoad: boolean = false;

  public componentDidMount(): void {
    /** 判断百度地图对象是否存在，如果不存在就去创建 */
    if (typeof BMap === 'undefined') {
      window._onBMapScriptLaoded = this.onScripteLaoded;
      this.createScript();
    } else {
      this.onScripteLaoded();
    }
  }

  public componentWillUnmount(): void {
    this.unmount = true;

    if (this.map) {
      (this.map as any).removeEventListener('tilesloaded', this.onTilesloaded);
      (this.map as any).removeEventListener('click', this.onClick);
      (this.map as any).removeEventListener('touchstart', this.onTouchstart);
    }

    if (this.loadTimer) {
      clearTimeout(this.loadTimer as number);
    }
  }

  /** 创建加载百度地图的脚本 */
  private createScript(): void {
    const bdMapScript = document.createElement('script');
    bdMapScript.type = 'text/javascript';
    bdMapScript.src = `//api.map.baidu.com/api?v=3.0&ak=${ak}&callback=_onBMapScriptLaoded`;
    document.body.appendChild(bdMapScript);

    if (this.props.scriptLoadMaxTime) {
      this.loadTimer = setTimeout(() => {
        if (this.state.load !== true) {
          this.setState({
            load: false,
          }, () => {
            if (this.props.onOverTime) {
              this.props.onOverTime();
            }
          });
        }
      }, this.props.scriptLoadMaxTime);
    }
  }

  /** 脚本加载完成 */
  private onScripteLaoded(): void {
    const { render, onReady, onTilesloaded, service } = this.props;

    if (this.unmount === true) {
      return;
    }

    if (!this.elemRef) {
      return;
    }

    this.map = new BMap.Map(this.elemRef.current as HTMLDivElement);

    if (render) {
      if (onTilesloaded) {
        onTilesloaded(this.map);
      }

      (this.map as any).addEventListener('click', this.onClick);
      (this.map as any).addEventListener('tilesloaded', this.onTilesloaded);
      (this.map as any).addEventListener('touchstart', this.onTouchstart);
    }

    if (onReady) {
      onReady(this.map);
    }

    if (service) {
      service.init(this.map);
    }

    this.setState({ load: true });
  }

  /** 地图块加载完成，每次获取到新的地图块都会触发 */
  private onTilesloaded(): void {
    if (this.hasLogo === true) {
      this.removeLogo();
    }
    this.onLoad();
  }

  /** 去除百度logo */
  private removeLogo(): void {
    if (this.elemRef.current) {
      const anchorBL = this.elemRef.current.querySelector('.anchorBL') as HTMLDivElement;
      if (anchorBL) {
        anchorBL.style.display = 'none';
        this.hasLogo = false;
      }
    }
  }

  private onLoad(): void {
    if (this.props.onLoad && this.isTriggerOnLoad === false && this.map) {
      this.props.onLoad(this.map);
      this.isTriggerOnLoad = true;
    }
  }

  /** 地图点击事件 */
  private onClick(): void {
    const { service, onClick } = this.props;
    if (service) {
      service.activeMarker.set(null);
    }
    if (onClick && this.map) {
      onClick(this.map);
    }
  }

  private onTouchstart(): void {
    const { onTouchstart } = this.props;

    if (onTouchstart && this.map) {
      onTouchstart(this.map);
    }
  }

  public render(): (JSX.Element | null)[] | null {
    const { render, className, service, tips } = this.props;
    let geolocation: BMap.GeocoderResult | boolean | undefined = this.props.geolocation;
    let children: (React.ReactElement<any> | null)[] | null = null;
    let location: React.ReactElement<any> | null = null;

    if (this.state.load) {
      geolocation = geolocation !== false ? service && service.geolocation.getValue() : true;
      children = React.Children.map(this.props.children, (child) => {
        const childrenProps: ChildrenProps = {
          service,
          map: this.map
        };

        if ((child as any).type.displayName === 'Location') {
          location = React.cloneElement(child as React.ReactElement<any>, {
            ...childrenProps,
            key: 'location'
          });
          return null;
        } else {
          return React.cloneElement(child as React.ReactElement<any>, childrenProps);
        }
      });
    }

    return [
      render ? (
        <div
          key="map"
          className={classNames(`${prefixCls}-bd`, className)}
          ref={this.elemRef}
          style={{
            display: geolocation ? 'block' : 'none'
          }}
        />
      ) : null,
      location,
      geolocation ? (
        <div key="children">{children}</div>
      ) : (
        tips ? (
          <Container
            key="auth"
            className={`${prefixCls}-tips`}
            alignItems="center"
            justifyContent="center"
          >开启定位权限后，地图才能正常使用</Container>
        ) : null
      )
    ];
  }
}

export default Map;