import YueJia from '../../../typings';
import * as React from 'react';
import Service from '../service';
import MarkerService from '../service/marker';
import Toast from '../../Toast';
import Request from '../../../app/request';
import Link from '../../Link';
import sheet, { getActionName, DetailParams } from '../../../model/behavior/sheet';
import PageStack from '../../PageStack';
import Popup from '../../Popup';
import TengXunTranslate from '../service/百度转腾讯坐标';
import GaoDeTranslate from '../service/百度转高德坐标';
import './index.scss';

export interface BaseProps {
}

interface Props extends BaseProps {
  service: Service;
  marker: BMap.Marker;
  markerService: MarkerService;
  title: string;
  address: string;
}

interface DefaulProps {
  tengXunTranslate: Request;
  gaoDeTranslate: Request;
}

interface State {
  popup: boolean;
}

interface Location {
  lat: number;
  lng: number;
}

const prefixCls = 'yj-component-map-infowindow';
/** 为了给行为数据中的导航行为做标记 */
export const MapNavigation = () => null;
class InfoWindow extends React.Component<Props & DefaulProps, State> {
  constructor(props: Props & DefaulProps, state: State) {
    super(props, state);

    this.onNavigation = this.onNavigation.bind(this);
    this.onClose = this.onClose.bind(this);
  }

  public state: State = {
    popup: false
  };
  public static defaultProps: DefaulProps = {
    tengXunTranslate: new TengXunTranslate(),
    gaoDeTranslate: new GaoDeTranslate()
  };

  private label: BMap.Label | undefined;

  public componentWillUnmount(): void {
    if (this.label) {
      this.label.removeEventListener('click', this.onNavigation);
    }
    if (this.props.tengXunTranslate.cancel) {
      this.props.tengXunTranslate.cancel();
    }
  }

  private onClose(): void {
    this.setState({
      popup: false
    });
  }

  private create(props: Props = this.props, distance: string): void {
    const marker = props.marker;
    const service = props.service;
    const display = service.activeMarker.get() === props.markerService ? 'block' : 'none';

    if (marker) {
      const getLabel = marker.getLabel();
      if (!getLabel) {
        this.label = new BMap.Label(this.getContent(props, distance));
        this.label.setStyle({
          border: 0,
          backgroundColor: 'transparent',
          left: '50%',
          transform: 'translate(-webkit-calc(-50% + 16px), -webkit-calc(-100% - 11px))',
          display
        });
        this.label.addEventListener('click', this.onNavigation);
        marker.setLabel(this.label);
      } else {
        getLabel.setContent(this.getContent(props, distance));
        getLabel.setStyle({ display });
      }
    }
  }

  /** 点击导航按钮 */
  private onNavigation(e: { domEvent: MouseEvent }): void {
    e.domEvent.preventDefault();
    e.domEvent.stopPropagation();
    const target = e.domEvent.target as HTMLDivElement;
    const isNavigationTarget = target.dataset.type === 'navigation';

    if (isNavigationTarget) {
      const { service } = this.props;
      const isOrgin = service.activeMarker.get() === service.center;
      const geocoderResult = service.geolocation.getValue();
      const navigationDisabled = isOrgin && !geocoderResult;

      if (navigationDisabled || !service.activeMarker) {
        Toast.show('正在定位中...');
      } else if (service.center.mapPoint && geocoderResult) {
        const activeMarker = service.activeMarker.get() as MarkerService;

        if (activeMarker.mapPoint) {
          this.setState({
            popup: true
          });
        } else {
          console.warn('component->Map->widget->InfoWindow->index->onNavigation', 'activeMarker.point未定义');
        }
      } else {
        console.warn('component->Map->widget->InfoWindow->index->onNavigation', 'model.origin.point未定义');
      }
    }
  }

  /** 选择地图 */
  private async switchMap(mapType: '百度' | '腾讯' | '高德'): Promise<void> {
    const { service } = this.props;
    const isOrgin = service.activeMarker.get() === service.center;
    const geocoderResult = service.geolocation.getValue();
    const activeMarker = service.activeMarker.get() as MarkerService;
    const mapPoint = activeMarker.mapPoint;
    let link = '';
    if (geocoderResult && service.center.mapPoint && mapPoint) {
      const originLat = isOrgin ? geocoderResult.point.lat : service.center.mapPoint.lat;
      const originLng = isOrgin ? geocoderResult.point.lng : service.center.mapPoint.lng;
      const originName = isOrgin ? '当前位置' : service.center.title;
      const title = activeMarker.title || (activeMarker.poi && activeMarker.poi.title) || '';
      const stackComponent = PageStack.getStackComponent();

      switch (mapType) {
        case '百度':
          // tslint:disable-next-line:max-line-length
          link = `https://api.map.baidu.com/direction?origin=latlng:${originLat},${originLng}|name:${originName}&destination=latlng:${mapPoint.lat},${mapPoint.lng}|name:${title}&mode=driving&region=${geocoderResult.addressComponents.city}&output=html&src=webapp.ruiyun.yuejia&coord_type=bd09ll`;
          break;
        case '腾讯':
          Toast.loading('请稍等...');
          await this.props.tengXunTranslate.send({
            locations: `${originLat},${originLng};${mapPoint.lat},${mapPoint.lng}`,
            callback: (response: YueJia.response) => {
              const result = response.result as Location[];
              const fromLng = result[0].lng;
              const fromLat = result[0].lat;
              const toLng = result[1].lng;
              const toLat = result[1].lat;
              // tslint:disable-next-line:max-line-length
              link = `https://apis.map.qq.com/uri/v1/routeplan?type=drive&from=${originName}&fromcoord=${fromLat},${fromLng}&to=${title}&tocoord=${toLat},${toLng}&policy=0&referer=悦家云`;
            }
          });
          Toast.close();
          break;
          case '高德':
            Toast.loading('请稍等...');
            await this.props.gaoDeTranslate.send({
              locations: `${originLng},${originLat};${mapPoint.lng},${mapPoint.lat}`,
              callback: (response: YueJia.response) => {
                const result = response.result as Location[];
                const fromLng = result[0].lng;
                const fromLat = result[0].lat;
                const toLng = result[1].lng;
                const toLat = result[1].lat;
                // tslint:disable-next-line:max-line-length
                link = `https://uri.amap.com/navigation?from=${fromLng},${fromLat},${originName}&to=${toLng},${toLat},${title}&mode=car&policy=1&src=悦家云&coordinate=gaode&callnative=0`;
              }
            });
            Toast.close();
            break;
        default:
          break;
      }

      if (stackComponent) {
        stackComponent.behavior.trigger<DetailParams['MapNavigation']>({
          actionName: getActionName(sheet.MapNavigation, 0, this.props),
          detailedData: {
            destination: title
          }
        });
        stackComponent.behavior.postAction.send({
          manually: true,
          callback: () => {
            Link.go(link);
          }
        });
      } else if (link) {
        Link.go(link);
      } else {
        Toast.show('网络繁忙');
      }
    }
  }

  private getContent(props: Props = this.props, distance: string): string {
    const { title, address, service } = props;
    const isOrgin = service.activeMarker.get() === service.center;
    const navigationDisabled = isOrgin && !service.geolocation.getValue();

    const distanceRender = distance ? `
      <div class="${prefixCls}-content">
        距离约${distance}
      </div>
    ` : '';
    return `
      <div class="${prefixCls} ${navigationDisabled ? prefixCls + '-navigationDisabled' : ''}">
        <div class="${prefixCls}-label">
          <div class="${prefixCls}-title">${title}</div>
          <div class="${prefixCls}-content">
            ${address}
          </div>
          ${distanceRender}
        </div>
        <div class="${prefixCls}-navigation" data-type="navigation">导航</div>
        <svg class="${prefixCls}-triangle-wrap">
          <polygon
            class="${prefixCls}-triangle"
            points="${`0,0 ${10},${9} ${20},0`}"
          ></polygon>
        </svg>
      </div>
    `;
  }

  public render(): JSX.Element {
    const { markerService, service } = this.props;
    const distance = service.activeMarker.get() !== service.center ? markerService.distance.get() + '米' : '';
    this.create(this.props, distance);
    return (
      <Popup
        visible={this.state.popup}
        contentCls={`${prefixCls}-popup`}
        closable
        onClose={this.onClose}
      >
        <Popup.Content>
          <div className={`${prefixCls}-popup-title`}>请选择地图</div>
          <div className={`${prefixCls}-popup-item`} onClick={() => this.switchMap('百度')}>百度地图</div>
          <div className={`${prefixCls}-popup-item`} onClick={() => this.switchMap('腾讯')}>腾讯地图</div>
          <div className={`${prefixCls}-popup-item`} onClick={() => this.switchMap('高德')}>高德地图</div>
          <div className={`${prefixCls}-popup-cancel`} onClick={this.onClose}>取消</div>
        </Popup.Content>
      </Popup>
    );
  }
}

export default InfoWindow;