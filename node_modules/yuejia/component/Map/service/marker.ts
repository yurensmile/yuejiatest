import ObObject from '../../../app/datatype/obObject';

class Marker {
  public map: BMap.Map | undefined;
  /** 半径圈 */
  public circle: BMap.Circle | undefined;
  /** 坐标点 */
  public mapPoint: BMap.Point | undefined;
  public poi: BMap.LocalResultPoi | undefined;
  public title: string = '';
  public address: string = '';
  /** 步行规划 */
  private walking?: BMap.WalkingRoute;
  /** 步行距离 */
  public distance: ObObject<number> = new ObObject({ defaultValue: -1 });

  public init(map: BMap.Map, point: BMap.Point, poi?: BMap.LocalResultPoi): void {
    this.map = map;
    this.mapPoint = point;
    this.poi = poi;
  }

  /** 获取缩放值 */
  public getZoom(radius?: number): number {
    if (this.map && radius) {
      const zoom = 16 - Math.floor((radius / 1000));
      // zoom最小不低于13
      return zoom < 13 ? 13 : zoom;
    }

    return 16;
  }

  public setCricle(radius: number, options?: BMap.CircleOptions, isSetZoom?: boolean): void {
    if (this.map && this.mapPoint) {
      if (this.circle) {
        this.map.removeOverlay(this.circle);
      }
      this.circle = new BMap.Circle(this.mapPoint, radius, {
        ...options,
        fillColor: (options && options.fillColor) || '#538701',
        strokeColor: (options && options.strokeColor) || '#538701',
        strokeWeight: (options && options.strokeWeight) || 1,
        fillOpacity: (options && options.fillOpacity) || 0.15,
        strokeOpacity: (options && options.strokeOpacity) || 0.15,
        enableMassClear: false
      });

      if (isSetZoom !== false) {
        this.map.setZoom(this.getZoom(radius));
      }

      this.map.addOverlay(this.circle);
    } else {
      console.error('map或point为空');
    }
  }

  public setWalkingRoute(map: BMap.Map, orign: BMap.Point | [number, number], endPoint: BMap.Point): void {
    if (!this.walking) {
      const startPoint = Array.isArray(orign) ? new BMap.Point(orign[0], orign[1]) : orign;
      this.walking = new BMap.WalkingRoute(map, {
        onSearchComplete: (result) => {
          const plan = result.getPlan && result.getPlan(0);

          if (plan) {
            this.distance.set(plan.getDistance(false) as number);
          } else {
            this.distance.set(-1);
          }
        }
      });
      this.walking.search(startPoint, endPoint);
    }
  }
}

export default Marker;