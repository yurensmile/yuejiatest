import * as React from 'react';
import Service from '../service';
import MarkerService from '../service/marker';
import InfoWindow from '../InfoWindow';
import PageStack from '../../PageStack';
import sheet, { DetailParams, getActionName } from '../../../model/behavior/sheet';

interface Icon {
  src: string;
  size: [number, number];
}

export interface Base {
  /** 标注图标 */
  icon: Icon;
  /** 标注坐标 */
  point: [number, number];
  /** 标注被选中时的图标 */
  activeIcon?: Icon;
}

export interface Props extends Base {
  service: Service;
  map: BMap.Map;
  markerService: MarkerService;
  /** 标注创建完成时触发 */
  onCreate: (map: BMap.Map, point: BMap.Point) => void;
  /** 是否可以被清除掉 */
  enableMassClear?: boolean;
  title: string;
  address: string;
}

interface State {
  marker: BMap.Marker | undefined;
}

/** 用于标记行为数据 */
export const MapMarkerBehavior = () => null;
class Marker extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.onClick = this.onClick.bind(this);
  }

  public state: State = {
    marker: undefined
  };
  private mapPoint!: BMap.Point;

  public componentDidMount(): void {
    const { onCreate, map } = this.props;

    this.create();
    onCreate(map, this.mapPoint);
  }

  public componentWillUnmount(): void {
    if (this.state.marker) {
      this.state.marker.removeEventListener('click', this.onClick);
      this.props.map.removeOverlay(this.state.marker);
    }
  }

  private create(): void {
    const { point, enableMassClear, icon, map } = this.props;
    const size = new BMap.Size(icon.size[0], icon.size[1]);
    const mapIcon = new BMap.Icon(icon.src, size);
    this.mapPoint = new BMap.Point(point[0], point[1]);

    mapIcon.imageSize = size;
    const marker = new BMap.Marker(this.mapPoint, {
      icon: mapIcon,
      enableMassClear: enableMassClear || false
    });
    this.setState({ marker }, () => {
      (this.state.marker as BMap.Marker).addEventListener('click', this.onClick);
      map.addOverlay(this.state.marker as BMap.Marker);
    });
  }

  private setIcon(activeMarker: MarkerService | null): void {
    if (this.state.marker) {
      const { markerService, icon, activeIcon } = this.props;
      const isActive = activeMarker === markerService;
      const mapicon = isActive ? (activeIcon || icon) : icon;
      const size = new BMap.Size(mapicon.size[0], mapicon.size[1]);
      const mapIcon = new BMap.Icon(mapicon.src, size);
      mapIcon.imageSize = size;
      this.state.marker.setIcon(mapIcon);
    }
  }

  private onClick(e: { domEvent: React.MouseEvent<HTMLDivElement> }): void {
    e.domEvent.preventDefault();
    e.domEvent.stopPropagation();

    const stackComponent = PageStack.getStackComponent();

    this.props.service.activeMarker.set(this.props.markerService);
    if (stackComponent) {
      const point = this.props.markerService.mapPoint;
      stackComponent.behavior.trigger<DetailParams['MapMarkerBehavior']>({
        actionName: getActionName(sheet.MapMarkerBehavior, 0, this.props),
        detailedData: {
          lng: (point && point.lng) as number,
          lat: (point && point.lat) as number
        },
      });
    }
  }

  public render(): JSX.Element {
    const { service, markerService } = this.props;
    const activeMarker = service.activeMarker.get();

    if (activeMarker) {
      this.setIcon(activeMarker as MarkerService);
    }
    return (
      <InfoWindow
        {...this.props}
        service={service}
        markerService={markerService}
        marker={this.state.marker as BMap.Marker}
      />
    );
  }
}

export default Marker;