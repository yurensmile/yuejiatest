import * as React from 'react';
import Marker, { Base as MarkerBaseProps, Props as MarkerProps } from '../Marker';
import { ChildrenProps } from '../index';
import Service from '../service';
// const isEqual: _.LoDashStatic['isEqual'] = require('lodash/isEqual');

export interface Base {
  cricle?: {
    radius: number;
    options?: BMap.CircleOptions;
  };
  onCreate?: MarkerProps['onCreate'];
}

export interface Props extends MarkerBaseProps, ChildrenProps, Base {
  /** 标题 */
  title: string;
  /** 地址 */
  address: string;
}

class Center extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.onCreate = this.onCreate.bind(this);
  }

  // public componentWillReceiveProps(nextProps: Props): void {
  //   const { map, point, service, onCenterCreate, cricle } = nextProps;

  //   if (map && service) {
  //     if (isEqual(this.props.cricle, cricle) === false) {
  //     }
  //   }
  // }

  private onCreate(map: BMap.Map, mapPoint: BMap.Point): void {
    const { onCreate, cricle, service, title, address } = this.props;

    if (service) {
      service.center.init(map, mapPoint);
      service.center.title = title;
      service.center.address = address;
    }

    if (onCreate) {
      onCreate(map, mapPoint);
    }

    if (service) {
      setTimeout(() => {
        map.centerAndZoom(mapPoint, service.center.getZoom(cricle && cricle.radius));
        map.enableScrollWheelZoom();
        if (cricle) {
          service.center.setCricle(cricle.radius, cricle.options);
        }
      }, 100);
    }
  }

  public render(): JSX.Element {
    const service = this.props.service as Service;

    return (
      <Marker
        {...this.props}
        map={this.props.map as BMap.Map}
        enableMassClear={false}
        onCreate={this.onCreate}
        markerService={service.center}
        service={service}
      />
    );
  }
}

export default Center;