import yj from '../../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import Service, { MapMarker } from '../service';
import MarkerService from '../service/marker';
import Container from '../../Container';
import Popup from '../../Popup';
import Icon from '../../Icon';
import svgRootPath from '../../../utils/svgRootPath';
import Text from '../../Text';
import { ChildrenProps } from '../index';
const upSvg = svgRootPath + require('../../../assets/up.svg').id;
import './indx.scss';

interface Icon {
  src: string;
  size: [number, number];
}

export interface Props extends ChildrenProps, yj.ComponentBehavior {
  activeCls?: string;
}

interface State {
  visible: boolean;
}

const prefixCls = 'yj-component-map-markerlist';
class MarkerList extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);

    this.onVisible = this.onVisible.bind(this);
    this.onListClick = this.onListClick.bind(this);
  }

  public state: State = {
    visible: false
  };

  private onVisible(): void {
    this.setState({
      visible: !this.state.visible
    });
  }

  private onListClick(marker: MarkerService): void {
    if (this.props.service) {
      this.props.service.activeMarker.set(marker);
      this.onVisible();
    }
  }

  private sort(a: MarkerService, b: MarkerService): number {
    const aValue = a.distance.get();

    if (aValue <= 0) {
      return 1;
    } else {
      return aValue - b.distance.get();
    }
  }

  public render(): JSX.Element | null {
    const { activeCls, componentName } = this.props;
    const service = this.props.service as Service;
    const choice = service.supporting.choice.value.get();
    const activeSupporting = choice.length && choice[0].text;
    const supportingMarker = service.supportingMarker.get();
    const markers = activeSupporting && supportingMarker && (supportingMarker as MapMarker).get(activeSupporting.toString());
    const activeMarker = service.activeMarker.get();

    return activeSupporting && markers ? (
      <Container className={`${prefixCls}-nearbyBlock`} alignItems="center" justifyContent="center">
        <Popup
          visible={this.state.visible}
          onClose={this.onVisible}
          contentCls={`${prefixCls}-popup`}
          closable
          componentName={componentName}
        >
          <Popup.Button onClick={this.onVisible}>
            <Container alignItems="center" justifyContent="center">
              <div>{activeSupporting ? `附近${activeSupporting}数量：${markers.length}个` : null}</div>
              {activeSupporting ? <Icon className={`${prefixCls}-nearbyBlock-up`} src={upSvg} /> : null}
            </Container>
          </Popup.Button>
          <Popup.Content>
            {activeSupporting ? (
              <React.Fragment>
                <Container className={`${prefixCls}-popup-title`} retinaBorder={{ direction: ['bottom'], color: '#e3e3e3' }}>
                  {`附近${activeSupporting}：${markers.length}个`}
                </Container>
                <div className={`${prefixCls}-popup-scroll`}>
                  {markers.sort(this.sort).map((marker) => (
                    <Container
                      key={marker.poi && marker.poi.point.lat.toString() + marker.poi.point.lng.toString()}
                      className={classNames(`${prefixCls}-popup-list`, {
                        [activeCls || '']: activeMarker === marker,
                        [`${prefixCls}-popup-active`]: activeMarker === marker
                      })}
                      alignItems="center"
                      onClick={() => this.onListClick(marker)}
                    >
                      <Container flex={1}><Text ellipsis>{marker.poi && marker.poi.title}</Text></Container>
                      <div>{marker.distance.get() > -1 ? `(距离约${marker.distance.get()}米)` : ''}</div>
                    </Container>
                  ))}
                </div>
              </React.Fragment>
            ) : null}
          </Popup.Content>
        </Popup>
      </Container>
    ) : null;
  }
}

export default MarkerList;