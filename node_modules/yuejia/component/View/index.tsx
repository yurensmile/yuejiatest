import * as React from 'react';
import Request, { Params } from '../../app/request';
import StateMachine, { BaseProps as StateBaseProps } from '../StateMachine';
import DataType from '../../_base/datatype';
import ObMap from '../../app/datatype/obMap';
import ObObject from '../../app/datatype/obObject';
import ObListMap from '../../app/datatype/obListMap';
import ObArray from '../../app/datatype/obArray';
const isEmpty: _.LoDashStatic['isEmpty'] = require('lodash/isEmpty');

export interface Props extends StateBaseProps {
  /** yj-framework中的Request对象 */
  request?: Request;
  /** 请求参数 */
  params?: Params;
  /** 延迟请求的时间 */
  delay?: number;
  /** 数据缓存 */
  cache?: DataType<any>;
  /** 用于是否重新请求 */
  refreshId?: any;
  /** 控制View是否渲染 */
  renderId?: any;
  /** 更新数据时是否显示loadingView */
  loading?: boolean;
  /** 定时刷新接口的时间，没有就不加定时器 */
  interval?: number;
  /** 其他参数，放在params后面 */
  otherParams?: any;
}

interface State {
  /** 是否加载完成 */
  load: boolean;
}

class View extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);
  }

  public static defaultProps: Props = {
    delay: 320,
    loading: true
  };

  public state: State = {
    load: false
  };

  /** setTimeout对象 */
  private timer: NodeJS.Timer | number | undefined;
  /** 定时刷新接口 */
  private intervalTimer: NodeJS.Timer | number | undefined;
  /** 成功的视图 */
  public static Complete: typeof StateMachine.Complete = StateMachine.Complete;
  /** 失败的视图 */
  public static Fail: typeof StateMachine.Fail = StateMachine.Fail;
  /** 加载中的视图 */
  public static Loading: typeof StateMachine.Loading = StateMachine.Loading;
  /** 数据为空的视图 */
  public static Empty: typeof StateMachine.Empty = StateMachine.Empty;

  public shouldComponentUpdate(nextProps: Props): boolean {
    const renderIdChange = nextProps.renderId === undefined ? true : nextProps.renderId !== this.props.renderId;
    return renderIdChange;
  }

  public componentDidMount(): void {
    const request = this.props.request;
    if (request) {
      const cache = this.readCache(this.props.cache, this.props.params);

      if (cache) {
        request.state.set(undefined);
        if (this.props.delay) {
          this.timer = setTimeout(() => {
            request.state.set('complete');
          }, this.props.delay);
        } else {
          request.state.set('complete');
        }
      } else {
        this.request(this.props, false);
      }

      if (this.props.interval !== undefined && this.props.interval >= 0) {
        this.intervalTimer = setInterval(() => {
          this.request(this.props, false);
        }, this.props.interval);
      }
    } else {
      console.warn('没有设置request,只能应用complete状态');
    }

    this.setState({
      load: true
    });
  }

  public componentDidUpdate(prevProps: Props): void {
    const paramsStr = typeof prevProps.params === 'object' ? JSON.stringify(prevProps.params) : prevProps.params;
    const nextParamsStr = typeof this.props.params === 'object' ? JSON.stringify(this.props.params) : this.props.params;
    const refreshIdChange = this.props.refreshId !== prevProps.refreshId;

    if (paramsStr !== nextParamsStr || refreshIdChange) {
      if (this.props.request) {
        this.request(this.props, this.props.loading ? false : true);
      }
    }
  }

  public componentWillUnmount(): void {
    if (this.timer) {
      clearTimeout(this.timer as NodeJS.Timer);
    }
    if (this.intervalTimer) {
      clearInterval(this.intervalTimer as NodeJS.Timer);
    }
    if (this.props.request && this.props.request.cancel) {
      this.props.request.cancel('cancel');
    }
  }

  /**
   * 发送请求
   * refreshChange: 刷新时是否进入loadding界面
   */
  private request(props: Props, refreshChange: boolean): void {
    if (props.request) {
      const request = props.request;

      if (refreshChange === false) {
        request.state.set('loading');
      }
      request.send(props.params, props.otherParams).catch((err) => null);
    }
  }

  /** 读取缓存 */
  private readCache(cache: Props['cache'], params?: Params): any | undefined {
    if (cache) {
      let data: any;
      if ((cache instanceof ObListMap || cache instanceof ObMap) && params) {
        data = cache.get(JSON.stringify(params));
      } else if ((cache instanceof ObObject || cache instanceof ObArray) && this.props.request) {
        if (params && this.props.request.isParamsChange(params) === false) {
          data = cache.get();
        } else if (params === undefined) {
          data = cache.get();
        }
      }
      // 判断数据是否为空
      if (data && isEmpty(data) === false) {
        return data;
      }
    }
  }

  public render(): JSX.Element | null {
    return this.state.load ? (
      <StateMachine
        state={this.props.request ? this.props.request.state.get() : 'complete'}
        loadingStyle={this.props.loadingStyle}
      >
        {this.props.children}
      </StateMachine>
    ) : null;
  }
}

export default View;