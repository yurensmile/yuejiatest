import yj from '../../typings/index';
import * as React from 'react';
import * as classNames from 'classnames';
import './index.scss';

export interface Props extends yj.ComponentProps {
  onClick?: yj.OnClick<HTMLDivElement>;
  /** 要显示的文本 */
  children?: any;
  /** 单行省略 */
  ellipsis?: boolean;
  /** 多行省略，需要指定高度 */
  ellipsisLines?: number;
  /** 是否需要单行两端对齐 */
  justify?: boolean;
}

const prefixCls = 'yj-component-text';
// class Text extends React.PureComponent<Props> {
//   public state: State = {
//     paddingTop: '',
//     paddingBottom: ''
//   };

//   // public componentDidMount(): void {
//   //   const fontWeight = getComputedStyle(this.elemRef).fontWeight;

//   //   if (fontWeight && (parseInt(fontWeight) >= 700 || fontWeight === 'bold')) {
//   //     const tempTop = getComputedStyle(this.elemRef).paddingTop;
//   //     const tempBottom = getComputedStyle(this.elemRef).paddingBottom;
//   //     const paddingTop = tempTop === '0px' ? '2' : tempTop;
//   //     const paddingBottom = tempBottom === '0px' ?  '2' : tempBottom;

//   //     this.setState({ paddingTop, paddingBottom });
//   //   }
//   // }

//   private saveElemRef = (el: HTMLDivElement) => {
//     this.elemRef = el;
//   }

//   public render(): JSX.Element {

//   }
// }
const Text = (props: Props) => {
  // const props = this.props;
  // const { paddingTop, paddingBottom } = this.state;

  return (
    <div
      className={classNames(prefixCls, props.className, {
        [`${prefixCls}-ellipsis`]: props.ellipsis,
        [`${prefixCls}-ellipsis-lines`]: !!(props.ellipsisLines && props.ellipsisLines > 0),
        [`${prefixCls}-justify`]: props.justify,
        [`${prefixCls}-line-clamp-${props.ellipsisLines}`]: !!props.ellipsisLines
      })}
      // style={{
        // paddingTop: paddingTop ? parseInt(paddingTop) : undefined,
        // paddingBottom: paddingBottom ? parseInt(paddingBottom) : undefined,
        // ...props.style
      // }}
      style={props.style}
      // ref={this.saveElemRef}
      onClick={props.onClick}
    >
      {props.justify && typeof props.children === 'string' ? props.children.split('').map((item, i) => (
        <div className={`${prefixCls}-justify-item`} key={item + i}>{item}</div>
      )) : props.children}
    </div>
  );
};

export default Text;