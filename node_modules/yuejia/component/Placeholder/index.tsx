import _yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import './index.scss';

interface BaseProps extends _yj.ComponentProps {
  /** 是否有动画 */
  animation?: boolean;
}

interface Props extends BaseProps {
  wrapCls?: string;
  type: 'list' | 'cardlist' | 'detail' | 'article';
}

const prefixCls = 'yj-component-placeholder';
const BasePlaceholder = (props: BaseProps) => {
  const { className, animation, style } = props;
  return (
    <div
      className={classNames(prefixCls, className, {
        [`${prefixCls}-animation`]: animation
      })}
      style={style}
    />
  );
};

const ListLoading = (props: BaseProps) => {
  const _prefixCls = prefixCls + '-list';
  return (
    <div className={_prefixCls}>
      <div className={`${_prefixCls}-flex`}>
        <BasePlaceholder className={`${_prefixCls}-cover`} />
        <div className={`${_prefixCls}-info`}>
          <BasePlaceholder className={`${prefixCls}-title`} animation />
          <div>
            <BasePlaceholder className={`${prefixCls}-subtitle`} animation />
            <BasePlaceholder
              className={`${prefixCls}-subtitle`}
              style={{ width: '50%' }}
              animation
            />
          </div>
          <BasePlaceholder className={`${prefixCls}-tag`} animation />
        </div>
      </div>
    </div>
  );
};

const CardLoading = (props: BaseProps) => {
  const { className, style } = props;
  return (
    <div className={className} style={style}>
      <div className={`${prefixCls}-cardCover`} />
      <BasePlaceholder
        className={`${prefixCls}-title`}
        style={{
          marginTop: 16
        }}
        animation
      />
      <BasePlaceholder  className={`${prefixCls}-subtitle`} animation />
      <BasePlaceholder
        className={`${prefixCls}-tag`}
        style={{
          marginTop: 16
        }}
        animation
      />
    </div>
  );
};

const ArticleLoading = (props: BaseProps) => {
  const { style } = props;
  const _prefixCls = prefixCls + '-article';
  return (
    <div style={style}>
      <div className={`${_prefixCls}-titleWrap`}>
        <BasePlaceholder className={`${prefixCls}-subtitle`} animation />
      </div>
      <div className={`${_prefixCls}-body`}>
        <BasePlaceholder className={`${prefixCls}-text`} animation />
        <BasePlaceholder className={`${prefixCls}-text`} animation />
        <BasePlaceholder className={`${prefixCls}-text`} animation />
        <BasePlaceholder className={`${prefixCls}-text`} animation />
        <BasePlaceholder className={`${prefixCls}-text`} animation />
      </div>
    </div>
  );
};

const DetailLoading = (props: BaseProps) => {
  const _prefixCls = prefixCls + '-detail';
  return (
    <div className={_prefixCls}>
      <div className={`${prefixCls}-banner`} />
      <div className={`${_prefixCls}-body`}>
        <div className={`${_prefixCls}-titleWrap`}>
          <BasePlaceholder className={`${prefixCls}-title`} animation />
          <BasePlaceholder className={`${prefixCls}-subtitle`} animation />
        </div>
        <ArticleLoading style={{ paddingTop: '1.28571rem' }} />
      </div>
    </div>
  );
};

const Placeholder = (props: Props) => {
  const { type, className, style, wrapCls } = props;
  let render;

  switch (type) {
    case 'list':
      render = (
        <div className={wrapCls}>
          <ListLoading className={className} style={style} {...props} />
          <ListLoading className={className} style={style} {...props} />
          <ListLoading className={className} style={style} {...props} />
          <ListLoading className={className} style={style} {...props} />
          <ListLoading className={className} style={style} {...props} />
          <ListLoading className={className} style={style} {...props} />
        </div>
      );
      break;
    case 'detail':
      render = <DetailLoading {...props} />;
      break;
    case 'article':
      render = <ArticleLoading {...props} />;
      break;
    case 'cardlist':
      render = (
        <div className={wrapCls}>
          <CardLoading className={className} style={style} {...props} />
          <CardLoading className={className} style={style} {...props} />
          <CardLoading className={className} style={style} {...props} />
        </div>
      );
      break;
    default:
      render = null;
      break;
  }
  return render;
};

export default Placeholder;