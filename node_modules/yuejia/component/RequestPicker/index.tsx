import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import View, { Props as ViewProps } from '../View';
import Picker, { Props as PickerProps } from '../Picker';

interface Props extends yj.ComponentProps, PickerProps, ViewProps {
  emptyCls?: string;
  loadingCls?: string;
  failCls?: string;
  emptyRender?: any;
  loadingRender?: any;
  failRender?: any;
}

interface State {
  refreshId: number;
}

class RequestPicker extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.onRefresh = this.onRefresh.bind(this);
  }

  public state: State = {
    refreshId: 1
  };

  private onRefresh(): void {
    this.setState({
      refreshId: this.state.refreshId + 1
    });
  }

  public render(): JSX.Element {
    const {
      emptyCls, loadingCls, failCls, emptyRender, loadingRender, failRender, className
    } = this.props;
    return (
      <View {...this.props} refreshId={this.state.refreshId}>
        <View.Complete>
          <Picker {...this.props} />
        </View.Complete>
        <View.Empty>
          <div className={classNames(className, emptyCls)}>{emptyRender || '暂无数据'}</div>
        </View.Empty>
        <View.Fail>
          <div className={classNames(className, failCls)} onClick={this.onRefresh}>{failRender || '点击重新加载'}</div>
        </View.Fail>
        <View.Loading autoHeight={false}>
          <div className={classNames(className, loadingCls)}>{loadingRender || '正在加载中...'}</div>
        </View.Loading>
      </View>
    );
  }
}

export default RequestPicker;