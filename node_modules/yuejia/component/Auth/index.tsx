import yj from '../../typings';
import * as React from 'react';
import Account from '../../model/account';
import SubscribeMask from '../SubscribeMask';

export interface Props extends yj.ComponentProps {
  children?: any;
  /** 默认为component */
  type?: 'page' | 'component';
  onClick?: yj.OnClick<HTMLDivElement>;
  /** 关注弹出层的内容 */
  subscribeContent?: any;
  /** 是否在触发点击事件时阻止传播 */
  stopPropagation?: boolean;
}

interface State {
  /** 是否显示关注 */
  subscribe: boolean;
}

class Auth extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props);

    this.elemRef = React.createRef();
    this.onClick = this.onClick.bind(this);
    this.onClose = this.onClose.bind(this);
  }

  public state: State = {
    subscribe: false
  };

  public static defaultProps: Props = {
    type: 'component'
  };

  public static defaultLoginUrl: string = '';
  public static loginAuth: typeof Account.loginAuth = Account.loginAuth;
  private elemRef: React.RefObject<HTMLDivElement>;

  public componentDidMount(): void {
    const { type } = this.props;

    // 如果没有登录进入了这个页面，就跳转到登录页
    if (Account.loginState !== true && type === 'page' && Account.loginAuth) {
      Account.loginAuth(undefined, Auth.defaultLoginUrl);
    }

    if (this.elemRef.current) {
      this.elemRef.current.addEventListener('click', this.onClick);
    }
  }

  public componentWillUnmount(): void {
    if (this.elemRef.current) {
      this.elemRef.current.removeEventListener('click', this.onClick);
    }
  }

  private onClick(e: Event): void {
    if (Account.subscribeState !== true || Account.loginState !== true || this.props.stopPropagation === true) {
      e.stopPropagation();
    }

    if (Account.subscribeState !== true) {
      this.setState({
        subscribe: true
      });
      return;
    }

    if (Account.loginAuth) {
      Account.loginAuth(() => {
        if (this.props.onClick) {
          this.props.onClick(e as any);
        }
      }, Auth.defaultLoginUrl);
    }
  }

  private onClose(e: React.MouseEvent<HTMLDivElement>): void {
    this.setState({
      subscribe: false
    });
  }

  public render(): JSX.Element[] | null {
    const { className, id, style, children, type, subscribeContent, datatype } = this.props;
    // 防止在未登录的情况下渲染页面
    return Account.loginState !== true && type === 'page' ? null : [
      <div
        key="children"
        className={className}
        id={id}
        style={style}
        dat-type={datatype}
        ref={this.elemRef}
      >{children}</div>,
      <SubscribeMask
        key="SubscribeMask"
        visible={this.state.subscribe}
        onClose={this.onClose}
      >
        {subscribeContent}
      </SubscribeMask>
    ];
  }
}

export default Auth;