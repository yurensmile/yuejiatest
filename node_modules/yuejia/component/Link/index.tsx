import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
// import stringToHex from '../../utils/stringToHex';
import global from '../../app/global';
import Account from '../../model/account';
import isHttp from '../../utils/isHttp';
// import isPassiveSupported from '../../utils/isPassiveSupported';

export interface Props extends yj.ComponentProps {
  /** 前往的页面 */
  to: string;
  /** 是否要权限认证 */
  loginAuth?: boolean;
  /** 被点击的按钮名称 */
  button?: string;
  /** 是否替换当前路由 */
  replace?: boolean;
  children?: any;
}

interface Options {
  /** 是否要权限认证 */
  loginAuth?: boolean;
  /** 被点击的按钮名称 */
  button?: string;
}

/** 点击锁，防止多次点击 */
// let lock = false;

/** 跳转到第三方链接 */
function toThirdLink(href: string): void {
  // const urlsearchparams = new URLSearchParams(window.location.search);
  // const pathname = window.location.hash.replace('#', '');
  // const origin = window.location.origin;
  // const locationpathname = window.location.pathname;
  // // const encodePathname = pathname.indexOf('%2') >= 0 ? pathname : encodeURIComponent(pathname);
  // const route = pathname.substr(0, 2) === ('2f' || '2F') ? pathname : stringToHex(pathname);

  // // 设置当前的编码后的路由search
  // urlsearchparams.set('route', route);

  // const newUrl = origin + locationpathname + '?' + urlsearchparams.toString().replace(/%3F/g, '').replace(/%3f/g, '') + '#' + pathname;
  // // 替换当前的路由
  // window.history.replaceState({}, document.title, newUrl);
  // 跳转到目标地址
  window.location.href = href;
}

function go(url: string, replace: boolean): void {
  if (isHttp(url)) {
    toThirdLink(url);
  } else if (global.history.location.pathname !== url) {
    if (replace) {
      global.history.replace(url);
    } else {
      global.history.push(url);
    }
  }
}

function link(url: string, replace: boolean, loginAuth?: boolean): void {
  // if (lock === false) {
    if (loginAuth) {
      Account.loginAuth(() => {
        go(url, replace);
      });
    } else {
      go(url, replace);
    }
    // lock = true;
    // setTimeout(() => {
    //   lock = false;
    // }, 320);
  // }
}

const prefixCls = 'yj-component-link';
class Link extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    // this.elemRef = React.createRef();
    this.onClick = this.onClick.bind(this);
  }

  // private elemRef: React.RefObject<HTMLDivElement>;

  // public componentDidMount(): void {
  //   if (this.elemRef.current) {
  //     this.elemRef.current.addEventListener('touchstart', this.onClick, isPassiveSupported ? { passive: true } : false);
  //   }
  // }

  // public componentWillUnmount(): void {
  //   if (this.elemRef.current) {
  //     this.elemRef.current.removeEventListener('touchstart', this.onClick);
  //   }
  // }

  /** 被点击的按钮名称，用于区分行为 */
  public static button: string | undefined;

  /** push一个路由 */
  public static go(url: string, options?: Options): void {
    link(url, false, options && options.loginAuth);
    Link.button = options && options.button;
  }

  /** replace一个路由 */
  public static replace(url: string, options?: Options): void {
    // const route = switchRouter(global._routes, url);
    // if (!route) {
    //   console.error('路由错误');
    // } else if (!route.props.component.pageName) {
    //   console.warn(route.props.component.displayName, 'pageNames属性为空');
    // }

    link(url, true, options && options.loginAuth);
    Link.button = options && options.button;
  }

  /** pop一个路由 */
  public static goBack(button?: string): void {
    Link.button = button;
    global.history.goBack();
  }

  private onClick(e: React.MouseEvent<HTMLDivElement>): void {
    e.preventDefault();
    e.stopPropagation();
    const { to, loginAuth, replace, button } = this.props;

    if (replace) {
      Link.replace(to, { loginAuth, button });
    } else {
      Link.go(to, { loginAuth, button });
    }
  }

  public render(): JSX.Element {
    const { className, children, datatype } = this.props;
    return (
      <div
        className={classNames(prefixCls, className)}
        onClick={this.onClick}
        data-type={datatype}
      >{children}</div>
    );
  }
}

export default Link;