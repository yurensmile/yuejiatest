import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import dateformat, { Mode } from '../../utils/dateformat';

interface Base {
  mode?: Mode;
}

export interface Props extends Base, yj.ComponentProps {
  start: Date;
  end: Date;
  /** 自定义输出 */
  format?: (diff: number) => any;
  /** 倒计时归零后的回调 */
  onEnd?: () => void;
}

interface State {
  /** 时间戳的差值 */
  diff: number | undefined;
  /** props.start.getTime()的缓存 */
  startTimeCache: number;
  /** props.end.getTime()的缓存 */
  endTimeCache: number;
}

const prefixCls = 'yj-component-countdown';
class Countdown extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

  }

  public static defaultProps: Base = {
    mode: 'auto'
  };

  public state: State = {
    diff: undefined,
    startTimeCache: this.props.start.getTime(),
    endTimeCache: this.props.end.getTime()
  };

  private timer: NodeJS.Timer | number | undefined;
  /** 定时器的时间戳 */
  private timingStamp!: number;

  public static getDerivedStateFromProps(nextProps: Props, prevState: State): State | null {
    const nextEndTime = nextProps.end.getTime();
    const endChange = nextEndTime !== prevState.endTimeCache;

    if (endChange) {
      return {
        ...prevState,
        endTimeCache: nextEndTime,
      };
    }

    return null;
  }

  public componentDidMount(): void {
    this.interval();
  }

  public componentWillUnmount(): void {
    this.clearTimer();
  }

  public componentDidUpdate(prevProps: Props, prevState: State): void {
    const endChange = this.state.endTimeCache !== prevState.endTimeCache;

    if (endChange) {
      this.clearTimer();
      this.interval();
    }
  }

  private getDiff(): number {
    const now = Date.now();
    /** 已运行的时间 */
    const runningTime = now - this.timingStamp;
    const diff = this.state.endTimeCache - this.state.startTimeCache - runningTime;
    return diff;
  }

  private interval(): void {
    this.timingStamp = Date.now();
    this.setState({
      diff: Math.ceil(this.getDiff() / 1000) * 1000
    });
    this.timer = setInterval(() => {
      const diff = this.getDiff();

      if (diff <= 0) {
        this.clearTimer();
        if (this.props.onEnd) {
          this.props.onEnd();
        }
      } else {
        // 防止秒数重复
        const realDiff = Math.ceil(diff / 1000) * 1000;
        this.setState({ diff: realDiff });
      }
    }, 1000);
  }

  private clearTimer(): void {
    if (this.timer) {
      clearInterval(this.timer as number);
    }
  }

  public render(): JSX.Element {
    const { className, style, mode, format } = this.props;
    let label = '';

    if (this.state.diff) {
      label = format ? format(this.state.diff) : dateformat(this.state.diff, mode as Mode, true);
    }

    return (
      <div
        className={classNames(prefixCls, className)}
        style={style}
      >
        {label}
      </div>
    );
  }
}

export default Countdown;