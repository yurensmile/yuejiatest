import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import KeyboardItem from './Item';
import Icon from '../Icon';
import svgRootPath from '../../utils/svgRootPath';
import isPassiveSupported from '../../utils/isPassiveSupported';
import './index.scss';
const deleteSvg = require('../../assets/input_item_delete.svg');
// const hideSvg = require('../../assets/input_item_kb_hide.svg');

interface OptionalProps {
  /** 最大长度 */
  maxLength?: number;
  /** 确认按钮的文本 */
  confirmLabel?: string;
  /** 关闭键盘的事件 */
  onClose?: () => void;
}

export interface Props extends yj.ComponentProps, OptionalProps {
  value: string | number;
  /**
   * number: 带小数点
   * money: 金额，最多2位小数
   * tel: 11位数字
   * idcard: 18位数字
   * integer: 无小数点
   */
  type: 'number' | 'money' | 'tel' | 'idcard' | 'integer';
  /** value改变时触发 */
  onChange: (value: string) => void;
  /** 确认按钮事件 */
  onConfirm: (value: string) => void;
  /** 最大数值 */
  maxNumber?: number;
}

interface State {
  /** 是否禁用数字按钮 */
  numberDisabled: boolean;
  /** 是否禁用特性按钮 */
  featureDisabled: boolean;
  value: string;
}

const prefixCls = 'yj-component-Keyboard';
class Keyboard extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);

    this.elemRef = React.createRef();
    this.onConfirmClick = this.onConfirmClick.bind(this);
    this.onCloseClick = this.onCloseClick.bind(this);
    this.onKeyboardClick = this.onKeyboardClick.bind(this);
    this.renderNumberItem = this.renderNumberItem.bind(this);
  }

  public static defaultProps: OptionalProps = {
    confirmLabel: '确认'
  };

  public state: State = {
    numberDisabled: false,
    featureDisabled: false,
    value: this.props.value.toString()
  };

  private elemRef: React.RefObject<HTMLTableElement>;
  private get maxLength(): number | undefined {
    const { type, maxLength } = this.props;

    if (type === 'tel') {
      return maxLength || 13;
    }
    if (type === 'idcard') {
      return maxLength || 18;
    }

    return maxLength;
  }
  /** 特性按钮的文本 */
  private get feature(): string {
    const { type } = this.props;

    if (type === 'number' || type === 'money') {
      return '.';
    }
    if (type === 'idcard') {
      return 'X';
    }

    return '';
  }

  public static getDerivedStateFromProps(nextProps: Props, prevState: State): State | null {
    if (nextProps.value.toString() !== prevState.value.toString()) {
      return {
        featureDisabled: prevState.featureDisabled,
        numberDisabled: prevState.numberDisabled,
        value: nextProps.value.toString()
      };
    }
    return null;
  }

  public componentDidMount(): void {
    const { type } = this.props;
    const value = this.state.value;
    const featureDisabled = this.getFeatureDisabled(value, type);
    const numberDisabled =  this.getNumberDisabeld(value, type);
    const willPreventDefault = isPassiveSupported ? { passive: false } : false;

    this.setState({ featureDisabled, numberDisabled });

    if (this.elemRef.current) {
      this.elemRef.current.addEventListener('touchstart', this.onKeyboardClick, willPreventDefault);
    }
  }

  public componentWillUnmount(): void {
    if (this.elemRef.current) {
      this.elemRef.current.removeEventListener('touchstart', this.onKeyboardClick);
    }
  }

  private onConfirmClick(): void {
    const { onConfirm } = this.props;
    onConfirm(this.state.value);
  }

  private onCloseClick(): void {
    const { onClose } = this.props;

    if (onClose) {
      onClose();
    }
  }

  private onKeyboardClick(e: HTMLElementEventMap['touchstart']): void {
    e.preventDefault();
    e.stopPropagation();
    const { type, onChange } = this.props;
    const target = e.target as HTMLTableDataCellElement;
    const value = target.dataset.key as string;
    let newValue = this.state.value;

    if (value === undefined) {
      return;
    }

    switch (value) {
      case 'hide':
        this.onCloseClick();
        break;
      case 'confirm':
        this.onConfirmClick();
        break;
      default:
        // 点击的是数字，因为feature用样式控制了，所以在这里不用判断
        if (this.state.numberDisabled && parseInt(value) >= 0) {
          return;
        }

        newValue = value === 'delete' ? newValue.substr(0, newValue.length - 1) : newValue + value;
        const featureDisabled = this.getFeatureDisabled(newValue, type);
        const numberDisabled =  this.getNumberDisabeld(newValue, type);

        // 判断有没有改变状态
        if (featureDisabled !== this.state.featureDisabled || numberDisabled !== this.state.numberDisabled) {
          this.setState({ featureDisabled, numberDisabled });
        } else {
          target.classList.add(`${prefixCls}-item-active`);
          setTimeout(() => {
            if (target && target.classList) {
              target.classList.remove(`${prefixCls}-item-active`);
            }
          }, 100);
        }

        onChange(newValue);
        this.setState({
          value: newValue
        });
        break;
    }
  }

  /** 渲染键盘数字按钮项 */
  private renderNumberItem(item: string, index: number): JSX.Element {
    return (
      <KeyboardItem
        // onClick={this.onKeyboardClick}
        key={`item-${item}-${index}`}
        value={item}
      >{item}</KeyboardItem>
    );
  }

  /** 获取特性按钮是否禁用 */
  private getFeatureDisabled(value: string, type: Props['type']): boolean {
    if (type === 'number' || type === 'money') {
      if (value.indexOf('.') >= 0) {
        return true;
      }
    }

    if (type === 'idcard') {
      if (value.length !== 17) {
        return true;
      }
    }

    return false;
  }

  /** 获取数字按钮是否禁用 */
  private getNumberDisabeld(value: string, type: Props['type'], maxNumber?: number): boolean {
    const maxLength = this.maxLength;

    // 超过最大长度
    if (maxLength !== undefined && value.length >= maxLength) {
      return true;
    }

    // 判断最大值
    if (maxNumber && parseFloat(value.toString()) > maxNumber) {
      return true;
    }

    // 金额只能有1个小数点且小数点只有后2位
    if (type === 'money') {
      const dotIndex = value.indexOf('.');
      const dotNumber = value.substr(dotIndex + 1);
      return dotIndex >= 0 && dotNumber.length >= 2;
    }

    return false;
  }

  public render(): JSX.Element[] {
    const { className, id, style, confirmLabel } = this.props;

    return [
      <div className={`${prefixCls}-input`} key="input">{this.props.value}</div>,
      <table
        className={classNames(prefixCls, className)}
        id={id}
        style={style}
        key="table"
        ref={this.elemRef}
      >
        <tbody>
          <tr className={`${prefixCls}-tr`}>
            {['1', '2', '3'].map(this.renderNumberItem)}
            <KeyboardItem
              rowSpan={2}
              value="delete"
              // onClick={this.onKeyboardClick}
            >
              <Icon className={`${prefixCls}-item-delete`} src={svgRootPath + deleteSvg.id} />
            </KeyboardItem>
          </tr>
          <tr className={`${prefixCls}-tr`}>
            {['4', '5', '6'].map(this.renderNumberItem)}
          </tr>
          <tr className={`${prefixCls}-tr`}>
            {['7', '8', '9'].map(this.renderNumberItem)}
            <KeyboardItem
              className={`${prefixCls}-item-confirm`}
              rowSpan={2}
              value="confirm"
              // onClick={this.onConfirmClick}
            >
              {confirmLabel as string}
            </KeyboardItem>
          </tr>
          <tr className={`${prefixCls}-tr`}>
            <KeyboardItem
              className={classNames({
                [`${prefixCls}-item-disabled`]: this.state.featureDisabled
              })}
              value={this.feature}
              // onClick={this.onKeyboardClick}
              style={{
                pointerEvents: this.feature === '' ? 'none' : undefined
              }}
            >
              {this.feature}
            </KeyboardItem>
            {this.renderNumberItem('0', 0)}
            <KeyboardItem
              value=""
              style={{
                pointerEvents: 'none'
              }}
              // onClick={this.onCloseClick}
            > </KeyboardItem>
          </tr>
        </tbody>
      </table>
    ];
  }
}
{/* <Icon className={`${prefixCls}-item-hide`} src={svgRootPath + hideSvg.id} /> */}
export default Keyboard;