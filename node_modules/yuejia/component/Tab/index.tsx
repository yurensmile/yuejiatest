import yj from '../../typings';
import * as React from 'react';
import { Value, CallBackOnClick } from '../../_base/action/Choice';
import ChoiceBase, { Base as ChoiceProps } from '../../_base/component/Choice';
import sheet, { getActionName, DetailParams } from '../../model/behavior/sheet';
import PageStack from '../PageStack';

export interface Props extends ChoiceProps, yj.ComponentBehavior {
  value?: Value;
  onClick?: CallBackOnClick;
}

interface State {
  value: Value;
}

function getIndex(props: Props): number {
  return props.data.findIndex((value) => {
    if (props.value) {
      if (props.value.value) {
        return props.value.value === value.value;
      } else {
        return props.value.text === value.text;
      }
    }

    return false;
  });
}

class Tab extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.onClick = this.onClick.bind(this);
  }

  public state: State = {
    value: this.props.value ? this.props.data[getIndex(this.props)] : this.props.data[0]
  };

  public static getDerivedStateFromProps(nextProps: Props, prevState: State): State | null {
    return {
      value: nextProps.value ? nextProps.data[getIndex(nextProps)] : nextProps.data[0]
    };
  }

  private onClick(e: React.MouseEvent<HTMLDivElement>, value: Value[], index: number): void {
    const { onClick } = this.props;
    const stackComponent = PageStack.getStackComponent();

    if (stackComponent) {
      stackComponent.behavior.trigger<DetailParams['Tab']>({
        actionName: getActionName(sheet.Tab, 0, this.props),
        detailedData: {
          name: value[0].text
        }
      });
    }

    if (onClick) {
      onClick(e, value, index);
    }

    this.setState({
      value: value[0]
    });
  }

  public render(): JSX.Element {
    const value = this.state.value;

    return (
      <ChoiceBase
        {...this.props}
        value={[value]}
        onClick={this.onClick}
        multiple={false}
      />
    );
  }
}

export default Tab;