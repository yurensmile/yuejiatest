import yj from '../../typings/index';
import * as React from 'react';
import * as classNames from 'classnames';
import Mask, { Props as MaskProps } from '../Mask';
import { Props as DialogProps } from '../Mask/Dialog';
import Button from './Button';
import Content from './Content';
import PageStack from '../PageStack';
import sheet, { getActionName } from '../../model/behavior/sheet';
import './index.scss';

export interface Props extends DialogProps, MaskProps, yj.ComponentBehavior {
  /** 是否开启动画 */
  animation?: boolean;
}

interface State {
  /** 关闭中 */
  closing: boolean;
  visible: boolean;
  buttonView: any;
  contentView: any;
}

export interface View {
  className?: string;
  onClick: yj.OnClick<HTMLDivElement>;
  disabled?: boolean;
  children?: any;
  prefixCls?: string;
}

const prefixCls = 'yj-component-popup';
class Popup extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.onClose = this.onClose.bind(this);
    this.onClick = this.onClick.bind(this);
    this.lazyClose = this.lazyClose.bind(this);
  }

  public static defaultProps: Props = {
    animation: true,
    visible: false,
    children: null,
    onClose: () => null
  };

  public state: State = {
    closing: false,
    visible: this.props.visible,
    buttonView: undefined,
    contentView: undefined,
  };

  /** 触发Popup显示的按钮 */
  public static Button: typeof Button = Button;
  /** 装载Popup的内容 */
  public static Content: typeof Content = Content;
  private timer: NodeJS.Timer | number | undefined;
  /** 是否处于动画执行的状态中 */
  private animation: boolean = false;

  public componentDidMount(): void {
    this.setView();
  }

  public componentDidUpdate(prevProps: Props): void {
    if (this.props.children !== prevProps.children) {
      this.setView(this.props);
    }

    if (this.props.visible !== prevProps.visible) {
      this.onAnimation(this.props.visible || false);
    }
  }

  public componentWillUnmount(): void {
    if (this.timer) {
      clearTimeout(this.timer as number);
    }
  }

  /** 动画进行中 */
  private onAnimation(visible: boolean, callback?: () => void): void {
    if (this.animation) {
      return;
    }
    const stackComponent = PageStack.getStackComponent();

    this.animation = true;

    if (visible === true && stackComponent && this.props.componentName) {
      stackComponent.behavior.trigger({
        actionName: getActionName(sheet.Popup, 0, this.props)
      });
    }

    if (visible === false) {
      this.setState({ closing: true }, () => {
        this.lazyClose(callback);
        this.animation = false;
      });
    } else {
      this.setState({ visible });
      if (callback) {
        callback();
      }
      this.timer = setTimeout(() => {
        this.animation = false;
      }, 300);
    }
  }

  /** 延迟关闭 */
  private lazyClose(callback?: () => void): void {
    if (this.props.animation) {
      this.timer = setTimeout(() => {
        this.setState({
          closing: false,
          visible: false,
        });

        if (callback) {
          callback();
        }
      }, 300);
    } else {
      this.setState({
        visible: false
      });

      if (callback) {
        callback();
      }
    }
  }

  private onClose(e: React.MouseEvent<HTMLDivElement>): void {
    this.onAnimation(false, () => {
      if (this.props.onClose) {
        this.props.onClose(e, false);
      }
    });
  }

  private onClick(e: React.MouseEvent<HTMLDivElement>, onClick: (e: React.MouseEvent<HTMLDivElement>) => void): void {
    this.onAnimation(true, () => onClick(e));
  }

  private setView(props: Props = this.props): void {
    let buttonView;
    let contentView;

    React.Children.forEach(props.children, (child) => {
      const view = child as React.ReactElement<View, typeof Button | typeof Content>;
      const type = view.type;
      if (type === Button) {
        buttonView = React.cloneElement(view, {
          key: 'PopupButton',
          prefixCls,
          onClick: (e: React.MouseEvent<HTMLDivElement>) => this.onClick(e, view.props.onClick)
        });
      }

      if (type === Content) {
        contentView = child;
      }
    });

    this.setState({
      buttonView, contentView
    });
  }

  public render(): JSX.Element[] {
    const { animation, contentCls, maskCls, id } = this.props;
    const { visible, closing } = this.state;

    return [
      this.state.buttonView,
      <Mask
        key="PopupMask"
        {...this.props}
        id={id}
        visible={visible}
        maskCls={classNames(maskCls, {
          [`${prefixCls}-fadein`]: animation,
          [`${prefixCls}-fadeout`]: animation && closing
        })}
        contentCls={classNames(contentCls, {
          [`${prefixCls}-enter`]: animation,
          [`${prefixCls}-leave`]: animation && closing
        })}
        onClose={this.onClose}
      >
        {this.state.contentView}
      </Mask>
    ];
  }
}

export default Popup;
