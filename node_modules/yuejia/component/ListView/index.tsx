import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import Request from '../../app/request';
import * as AutoSizer from 'react-virtualized/dist/es/AutoSizer';
import * as VList from 'react-virtualized/dist/es/List';
import * as InfiniteLoader from 'react-virtualized/dist/es/InfiniteLoader';
import { IndexRange } from 'react-virtualized';
import { Props as ViewProps } from '../View';
import ChoiceService from '../Choice/service';
import { Value, CallBackOnClick } from '../../_base/action/Choice';
import './index.scss';
const throttle: _.LoDashStatic['throttle'] = require('lodash/throttle');

type RequestState = 'init' | 'next';

export interface SendParams {
  listviewParams: Limit &{
    state: RequestState;
  };
}

export interface Limit {
  /** 起始页 */
  start: number;
  /** 每页数量 */
  size: number;
}

interface ChoiceParams {
  service: ChoiceService;
  /** 是否多选 */
  multiple: boolean;
  /** 是否禁用 */
  disabled?: boolean;
  /** 最大选择数量，默认全选 */
  max?: number;
}

export interface Props extends yj.ComponentProps, DefaultProps {
  children: (params: VList.ListRowProps, active: boolean | undefined) => any;
  rowHeight: VList.ListProps['rowHeight'];
  params?: ViewProps['params'];
  dataLength: number;
  /** 分页 */
  limit: Limit;
  request: Request;
  /** 容器的dom引用 */
  // containerRef: React.RefObject<HTMLElement>;
  instanceRef?: (ref: ListView) => void;
  /** 仅开启了chocie才有拓展参数 */
  onClick?: CallBackOnClick;
  /** 选择器 */
  choice?: ChoiceParams;
  /** 刷新id用于列表的重新请求，页码会初始化为第一页 */
  refreshId?: number | string;
}

interface DefaultProps {
  emptyRender?: any;
  failRender?: any;
  loadingRender?: any;
}

interface State {
  // width: number;
  // height: number;
  // loading: boolean;
  // chocieValue: Value[];
}

const prefixCls = 'yj-component-listview';
class ListView extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.handleInfiniteOnLoad = this.handleInfiniteOnLoad.bind(this);
    this.isRowLoaded = this.isRowLoaded.bind(this);
    this.reset = this.reset.bind(this);
    this.request = this.request.bind(this);
    this.onClick = this.onClick.bind(this);
  }

  public static defaultProps: DefaultProps = {
    emptyRender: null,
    failRender: null,
    loadingRender: null
  };

  /** 页码 */
  private page: number = this.props.limit.start;
  /** 用于判断是第一次请求还是多次请求 */
  private requestState: RequestState = 'init';
  private loadedRowsMap: any = {};
  /** 是否到底 */
  private isEnd: boolean = false;
  // tslint:disable-next-line:typedef
  private requestThrottle = throttle((params) => this.request(params), 2000);
  // tslint:disable-next-line:typedef
  private infiniteThrottle = throttle((params) => this.handleInfiniteOnLoad(params), 3000);
  // public state: State = {
  //   width: 0,
  //   height: 0
  // };

  public componentDidMount(): void {
    if (this.props.instanceRef) {
      this.props.instanceRef(this);
    }
    this.reset();
    this.request(this.props);
  }

  public componentWillUnmount(): void {
    this.requestThrottle.cancel();
    this.infiniteThrottle.cancel();
  }

  public componentDidUpdate(prevProps: Props): void {
    const paramsStr = typeof prevProps.params === 'object' ? JSON.stringify(prevProps.params) : prevProps.params;
    const nextParamsStr = typeof this.props.params === 'object' ? JSON.stringify(this.props.params) : this.props.params;
    const refreshIdChange = prevProps.refreshId !== this.props.refreshId;

    if (paramsStr !== nextParamsStr || refreshIdChange) {
      if (this.props.request) {
        this.reset();
        this.request(this.props);
      }
    }
  }

  private sendParams(): SendParams  {
    return {
      listviewParams: {
        start: this.page,
        size: this.props.limit.size,
        state: this.requestState
      }
    };
  }

  private handleInfiniteOnLoad(params: IndexRange): Promise<any> {
    const dataLength = this.props.dataLength;
    if (this.isEnd === false || dataLength % this.props.limit.size !== 0) {
      return Promise.resolve();
    }

    // this.setState({
    //   loading: true,
    // });

    for (let i = params.startIndex; i <= params.stopIndex; i++) {
      // 1 means loading
      this.loadedRowsMap[i] = 1;
    }

    this.page++;
    this.requestState = 'next';
    this.isEnd = false;
    return this.requestThrottle(this.props);
  }

  private request(props: Props): Promise<void> {
    return props.request.send({
      ...this.sendParams(),
      ...props.params
    });
  }

  private isRowLoaded(params: any): boolean {
    if (this.isEnd === false) {
      this.isEnd = params.index === this.props.dataLength - 1;
    }
    return !!this.loadedRowsMap[params.index];
  }

  /** 重置页码为第一页 */
  public reset(): void {
    this.requestState = 'init';
    this.page = this.props.limit.start;
    this.loadedRowsMap = {};
    this.props.request.state.set('loading');
  }

  /** 格式化value */
  private formatValue(choice: ChoiceParams, newIndex: number): Value[] {
    const multiple = choice.multiple;
    const service = choice.service;
    const values = service.value.get();

    if (multiple) {
      const index = values.findIndex((item) => {
        // 这里的value就是index
        return item.value === newIndex;
      });
      if (index >= 0) {
        values.splice(index, 1);
      } else {
        values.push({
          text: '',
          value: newIndex
        });
      }

      return values;
    } else {
      return [{
        text: '',
        value: newIndex
      }];
    }
  }

  private onClick(event: React.MouseEvent<HTMLDivElement>, index: number): void {
    const { onClick, choice } = this.props;

    if (choice) {
      const disabled = choice.disabled;
      const multiple = choice.multiple;
      const max = choice.max;
      const values = choice.service.value.get();
      let newValaue: Value[] = values;

      if (disabled) {
        return;
      }
      // 防止重复点击
      if (multiple !== true && values[0] && values[0].value === index)  {
        return;
      }

      if (values && ((max && values.length < max) || max === undefined)) {
        newValaue = this.formatValue(choice, index);
      } else if (values && (max && values.length >= max) && values.findIndex((item) => item.value === index) >= 0) {
        newValaue = this.formatValue(choice, index);
      }
      if (onClick) {
        onClick(event, newValaue, index);
      }

      choice.service.value.set(newValaue);
    }
  }

  private itemIsActive(index: number): boolean {
    if (this.props.choice) {
      return this.props.choice.service.value.get().findIndex((item) => item.value === index) >= 0;
    } else {
      return false;
    }
  }

  private stateRender(): JSX.Element | null {
    const { children, rowHeight, dataLength, request, emptyRender, failRender, loadingRender, className } = this.props;
    const state = request.state.get();
    const isOver = dataLength % this.props.limit.size !== 0;

    switch (state) {
      case 'complete':
        return (
          <InfiniteLoader.InfiniteLoader
            isRowLoaded={this.isRowLoaded}
            loadMoreRows={this.infiniteThrottle}
            rowCount={dataLength}
            threshold={1}
          >
            {({ onRowsRendered, registerChild }) => (
              <AutoSizer.AutoSizer>
                {({ height, width }) => (
                  <VList.List
                    className={classNames({
                      [`${prefixCls}-loading`]: isOver === false,
                      [`${prefixCls}-over`]: isOver
                    })}
                    ref={registerChild}
                    // width={this.state.width}
                    // height={this.state.height}
                    autoHeight={false}
                    autoWidth={false}
                    width={width}
                    height={height}
                    rowCount={dataLength}
                    rowHeight={rowHeight}
                    onRowsRendered={onRowsRendered}
                    rowRenderer={(params) => (
                      <div
                        className={className}
                        style={params.style}
                        key={params.key}
                        onClick={(e) => this.onClick(e, params.index)}
                      >{children(params, this.itemIsActive(params.index))}</div>
                    )}
                  />
                )}
              </AutoSizer.AutoSizer>
            )}
          </InfiniteLoader.InfiniteLoader>
        );
      case 'empty':
        return emptyRender;
      case 'fail':
        return failRender;
      case 'loading':
        return loadingRender;
      default:
        return null;
    }
  }

  public render(): JSX.Element | null {
    return this.stateRender();
  }
}

export default ListView;
      // {/*  */}
