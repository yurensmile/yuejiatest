import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import * as BetterScroll from 'better-scroll';
import './index.scss';

export interface BaseProps extends yj.ComponentProps {
  /** 自动间隔时间 */
  interval?: number;
  /** 滑动后触发的事件 */
  onAfterSlide?: (index: number) => void;
}

export interface Props extends BaseProps {
  slideHeight: number;
}

const prefixCls = 'yj-component-marquee';
const BScroll = (BetterScroll as any).default as BScrollStatic;

class Marquee extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.slideRef = React.createRef();
    this.groupRef = React.createRef();
    this.onAfterSlide = this.onAfterSlide.bind(this);
  }

  public static defaultProps: Props = {
    interval: 5000,
    slideHeight: 0
  };

  private slideRef: React.RefObject<HTMLDivElement>;
  private groupRef: React.RefObject<HTMLDivElement>;
  private slide!: BScroll;
  private timer: NodeJS.Timer | number | undefined;
  /** 动画执行时间 */
  private speed: number = 400;
  /** 总slide数量 */
  private getSlideCount(): number {
    return React.Children.count(this.props.children);
  }

  // 设置容器总高度
  private getFrameHeight(slideHeight: number, count: number): number {
    let height = 0;

    for (let i = 0; i < count; i++) {
      height += slideHeight;
    }

    if (count > 1) {
      height += 2 * slideHeight;
    }

    return height;
  }

  public componentDidMount(): void {
    this.init();
  }

  public componentWillUnmount(): void {
    if (this.timer) {
      clearTimeout(this.timer as number);
    }

    if (this.slide) {
      this.slide.destroy();
    }
  }

  private init(): void {
    if (this.slideRef.current && this.groupRef.current) {
      const count = this.getSlideCount();
      const slideHeight = this.props.slideHeight;
      const frameHeight = this.getFrameHeight(slideHeight, count);
      this.groupRef.current.style.height = frameHeight + 'px';
      this.slide = new BScroll(this.slideRef.current, {
        scrollX: false,
        scrollY: true,
        momentum: false,
        click: true,
        snap: {
          loop: true,
          threshold: 0.3,
          speed: this.speed
        },
        bounce: false,
      });

      this.slide.disable();
      this.slide.on('scrollEnd', this.onAfterSlide);
      // 初始化自动轮播
      this.autoplay(this.props);
    }
  }

  private onAfterSlide(): void {
    // 当前索引
    const nowIndex = this.slide.getCurrentPage().pageY;
    this.setState({ index: nowIndex });

    // 索引变化时才触发滑动后的事件
    if (this.props.onAfterSlide) {
      this.props.onAfterSlide(nowIndex);
    }
  }

  /** 自动轮播 */
  private autoplay(props: Props): void {
    this.timer = setInterval(() => {
      this.slide.next();
    }, this.props.interval);
  }

  public render(): JSX.Element {
    const { className, children, style } = this.props;

    return (
      <div
        className={classNames(prefixCls, className)}
        style={style}
        ref={this.slideRef}
      >
        <div
          className={`${prefixCls}-group`}
          ref={this.groupRef}
        >
          {children}
        </div>
      </div>
    );
  }
}

export default Marquee;