import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import Carousel from '../Carousel';
import Container from '../Container';
import Cell, { BaseProps as CellProps } from './Cell';
import Title from './Title';
import dateAdd from '../../utils/dateAdd';
import dateFormat from '../../utils/dateformat';
import rangeDateToDates from '../../utils/rangeDateToDates';
import sheet, { getActionName, DetailParams } from '../../model/behavior/sheet';
import PageStack from '../PageStack';
import Service from './service';
import './index.scss';

interface Props extends yj.ComponentProps, CellProps {
  service?: Service;
  /** 最小日期，默认当前日期一年前 */
  minDate?: Date;
  /** 最大日期，默认当前日期一年后 */
  maxDate?: Date;
  /** 日期被选中的回调 */
  onSelected?: (e: React.MouseEvent<HTMLDivElement>, date: string) => void;
  /** 滑动日历 */
  onAfterSlide?: (currentDate: Date) => void;
}

interface State {
  dates: Date[];
  /** 最小日期，默认当前日期一年前 */
  minDate?: Date;
  /** 最大日期，默认当前日期一年后 */
  maxDate?: Date;
  /** 日历主体的显示与否 */
  visible: boolean;
}

const prefixCls = 'yj-component-calendar';
const nowDate = new Date();

class Calendar extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    if (props.service) {
      // 初始化index
      props.service.index.set(this.getIndexByDates(nowDate));
      props.service.currentDate.set(this.getCurrentDate(this.index));
    }

    this.onAfterSlide = this.onAfterSlide.bind(this);
    this.onDayClick = this.onDayClick.bind(this);
    this.toggleVisibe = this.toggleVisibe.bind(this);
  }

  public static defaultProps: Props = {
    minDate: dateAdd(nowDate, -1, 'years'),
    maxDate: dateAdd(nowDate, 1, 'years')
  };

  public state: State = {
    dates: rangeDateToDates(this.props.minDate as Date, this.props.maxDate as Date),
    minDate: this.props.minDate,
    maxDate: this.props.maxDate,
    visible: true
  };

  private get index(): number {
    const { service } = this.props;
    return service ? service.index.get() : this.getIndexByDates(new Date());
  }

  private getCurrentDate(index: number): Date {
    return this.state.dates[index];
  }

  // public static getDerivedStateFromProps(nextProps: Props, prevState: State): State | null {
  //   const minDateChange = prevState.minDate !== nextProps.minDate;
  //   const maxDateChange = prevState.maxDate !== nextProps.maxDate;

  //   if (minDateChange || maxDateChange) {
  //     const minDate = nextProps.minDate || dateAdd(nowDate, -1, 'years');
  //     const maxDate = nextProps.maxDate || dateAdd(nowDate, 1, 'years');

  //     return {
  //       dates: rangeDateToDates(minDate, maxDate),
  //       minDate: prevState.minDate,
  //       maxDate: prevState.maxDate
  //     };
  //   }

  //   return null;
  // }

  /**
   * 标题日期格式化
   * selectedDate: 是否是选择的日期
   */
  private titleFormat(date: Date, selectedDate?: boolean): string {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();

    return selectedDate ? `${year}年${month}月${day}日` : `${year}年${month}月`;
  }

  /** 在dates里查找给定日期在dates中的索引 */
  private getIndexByDates(date: Date): number {
    for (let i = 0; i < this.state.dates.length; i++) {
      const temp = this.state.dates[i];

      if (temp.getFullYear() === date.getFullYear() && temp.getMonth() === date.getMonth()) {
        return i;
      }
    }

    return -1;
  }

  private onAfterSlide(index: number): void {
    const currentDate = this.getCurrentDate(index);
    if (this.props.service) {
      this.props.service.index.set(index);
      this.props.service.currentDate.set(currentDate);
    }

    if (this.props.onAfterSlide) {
      this.props.onAfterSlide(currentDate);
    }
  }

  private onDayClick(e: React.MouseEvent<HTMLDivElement>, day: number): void {
    if (this.props.service) {
      const index = this.props.service.index.get();
      const date = this.state.dates[index];
      const selectedDate = new Date(date.getFullYear(), date.getMonth(), day);
      const stackComponent = PageStack.getStackComponent();
      const dateStr = dateFormat(selectedDate, 'yyMMdd', true);
      this.props.service.selectedDate.set(selectedDate);

      if (stackComponent) {
        stackComponent.behavior.trigger<DetailParams['Calendar']>({
          actionName: getActionName(sheet.Calendar, 0, this.props),
          detailedData: {
            date: dateStr
          }
        });
      }

      if (this.props.onSelected) {
        this.props.onSelected(e, dateStr);
      }
    }
  }

  private toggleVisibe(): void {
    this.setState({
      visible: !this.state.visible
    });
  }

  public render(): JSX.Element {
    const { className, style, service, activeDate, dotDate } = this.props;
    const dates = this.state.dates;
    const index = this.index;
    const currentDate = this.getCurrentDate(index);
    const selectedDate = service && service.selectedDate.get();

    return (
      <div className={classNames(prefixCls, className)}>
        <Title visible={this.state.visible} toggleVisibe={this.toggleVisibe}>
          {selectedDate ? this.titleFormat(selectedDate as Date, true) : this.titleFormat(currentDate, false)}
        </Title>
        <div
          style={{
            display: this.state.visible ? 'block' : 'none'
          }}
        >
          <Container alignItems="center">
            {['日', '一', '二', '三', '四', '五', '六'].map((week) => (
              <div key={week} className={`${prefixCls}-week`}>{week}</div>
            ))}
          </Container>
          <Carousel
            className={`${prefixCls}-carousel`}
            style={style}
            index={index}
            // 表示不会改变dataId
            dataId={1}
            onAfterSlide={this.onAfterSlide}
          >
            {dates.map((date) => (
              <Cell
                key={date.getTime()}
                date={date}
                onClick={this.onDayClick}
                activeDate={activeDate}
                dotDate={dotDate}
                selectedDate={service ? selectedDate as Date : undefined}
              />
            ))}
          </Carousel>
        </div>
      </div>
    );
  }
}

export default Calendar;