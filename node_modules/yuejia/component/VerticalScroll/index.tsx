import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import * as BetterScroll from 'better-scroll';

export interface Props extends yj.ComponentProps {
  children: JSX.Element[] | JSX.Element;
  wrapCls?: string;
}

const BScroll = (BetterScroll as any).default as BScrollStatic;
const prefixCls = 'yj-component-verticalscroll';
class VerticalScroll extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.elemRef = React.createRef();
  }

  private elemRef: React.RefObject<HTMLDivElement>;
  private scroll!: BScroll;

  public componentDidMount(): void {
    this.scroll = new BScroll(this.elemRef.current as HTMLDivElement, {
      scrollX: false,
      scrollY: true,
      bounce: true,
      click: true
    });
  }

  public componentDidUpdate(): void {
    this.scroll.refresh();
  }

  public componentWillUnmount(): void {
    if (this.scroll) {
      this.scroll.destroy();
    }
  }

  public render(): JSX.Element {
    const { className, style, children, wrapCls, id } = this.props;

    return (
      <div
        className={classNames(prefixCls, className)}
        id={id}
        ref={this.elemRef}
        style={style}
      >
        <div className={classNames(`${prefixCls}-wrap`, wrapCls)}>{children}</div>
      </div>
    );
  }
}

export default VerticalScroll;