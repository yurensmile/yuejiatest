import * as React from 'react';
import Before from './Before';
import Body from './Body';
import After, { Base as AfterParams } from './After';
import Container, { Props as ContainerProps } from '../Container';
import Fields from '../../_base/service/fields';
import { FormContext } from '../Form';
import FormService from '../Form/service';
import './index.scss';

export interface Props extends ContainerProps {
  service?: Fields<any>;
}

interface State {

}

class FormItem extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);
  }

  /** 前置容器 */
  public static Before: typeof Before = Before;
  /** 主体容器 */
  public static Body: typeof Body = Body;
  /** 后置容器 */
  public static After: typeof After = After;

  public setChildProps(formservice: FormService): JSX.Element[] {
    const service = this.props.service as Props['service'];
    return React.Children.map(this.props.children, (child) => {
      const item = child as React.ReactElement<any>;
      const type = item.type as React.ComponentClass<any>;

      switch (type.displayName) {
        case 'Body':
          return React.cloneElement(item, { service });
        case 'After':
          let afterParams: AfterParams | undefined;

          if (service && formservice) {
            afterParams = {
              filed: service,
              form: formservice
            };
          }
          return React.cloneElement(item, afterParams);
        default:
          return item;
      }
    });
  }

  public render(): JSX.Element {
    const { children, service, className } = this.props;

    return (
      <Container
        className={className}
        alignItems="center"
        {...this.props}
      >
        <FormContext.Consumer>
          {(formservice: FormService) => service ? this.setChildProps(formservice) : children}
        </FormContext.Consumer>
      </Container>
    );
  }
}

export default FormItem;
