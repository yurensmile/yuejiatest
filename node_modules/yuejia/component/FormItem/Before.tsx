import yj from '../../typings/index';
import * as React from 'react';
import * as classNames from 'classnames';
import Icon from '../Icon';
import isSvgFile from '../../utils/isSvgFile';

export interface Props extends yj.ComponentProps {
  className?: string;
  iconClassName?: string;
  children?: any;
  src?: string;
}

interface State {
  width: number;
}

const prefixCls = 'yj-component-formitem';
class Before extends React.PureComponent<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);
  }

  public state: State = {
    width: 0
  };

  private iconWrapRef: HTMLDivElement | undefined;

  public componentDidMount(): void {
    this.setWidth();
  }

  public setWidth(): void {
    if (this.iconWrapRef) {
      const child = this.iconWrapRef.children[0];
      const width = parseFloat(getComputedStyle(child).width || '');

      this.setState({
        width
      });
    }
  }

  public render(): JSX.Element {
    const { children, src, className, iconClassName } = this.props;
    const cls = classNames(`${prefixCls}-before`, className);
    const iconCls = classNames(`${prefixCls}-beforeIcon`, iconClassName);
    let render;
    let iconRender;

    if (children) {
      render = children;
    } else if (src) {
      iconRender = isSvgFile(src) ? (
        <Icon className={iconCls} src={src} />
      ) : (
        <img className={iconCls} src={src} />
      );
      render = (
        <div
          className={cls}
          ref={(el: HTMLDivElement) => this.iconWrapRef = el}
          style={{
            width: this.state.width || 'auto'
          }}
        >
          {iconRender}
        </div>
      );
    }
    return render;
  }
}

export default Before;