import yj from '../../typings/index';
import * as React from 'react';
import Icon from '../Icon';
import Toast from '../Toast';
import FiledsService from '../../_base/service/fields';
import FormService from '../Form/service';
import svgRootPath from '../../utils/svgRootPath';
const svgFile = {
  prompt: svgRootPath + require('../../assets/prompt.svg').id,
};

export interface Base {
  filed: FiledsService<any>;
  form: FormService;
}

export interface Props extends yj.ComponentProps {
  /** 是否开启提示文字 */
  prompt?: boolean;
  children?: any;
}

const prefixCls = 'yj-component-formitem';
class After extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.onPrompt = this.onPrompt.bind(this);
  }

  public static displayName: string = 'After';

  private isDisplay(): boolean {
    const props = this.props as Props & Base;
    const field = props.filed;
    const form = props.form;
    // 为了触发mobox的机制，使value改变时函数可以调用
    const value = field.value.get();

    if (field && field.required && form.trigger.get() && field.state === 'empty') {
      return true;
    } else if (field && (value !== '' || value !== undefined) && field.state === 'fail') {
      return true;
    }

    return false;
  }

  public onPrompt(): void {
    const props = this.props as Props & Base;

    if (props.prompt) {
      Toast.show(props.filed.getPrompt() || '');
    }
  }

  public promptRender(): JSX.Element {
    return (
      <Icon
        className={`${prefixCls}-prompt`}
        src={svgFile.prompt}
        onClick={this.onPrompt}
        style={{
          display: this.isDisplay() ? 'block' : 'none'
        }}
      />
    );
  }

  public render(): JSX.Element {
    const { prompt, children } = this.props;
    let render;

    if (children) {
      render = children;
    } else if (prompt) {
      render = this.promptRender();
    }

    return render;
  }
}

export default After;