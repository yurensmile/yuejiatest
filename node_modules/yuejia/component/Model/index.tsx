import * as React from 'react';
import { createSubscription } from 'create-subscription';
import global from '../../app/global';

interface Props {
  children: (model: any) => any;
}
interface State {
  load: boolean;
}

let subscribeCallback: (model: object) => void;
let dispatchLock: boolean = false;
let rafId: number | undefined = 1;
const Subscription: React.ComponentFactory<any, any> = createSubscription({
  getCurrentValue: (model: object) => {
    return model;
  },
  subscribe: (model: object, callback: (model: object) => void) => {
    subscribeCallback = callback;
    return () => null;
  }
});

// function dispatch(): void {

// }
function rafDispatch(): void {
  if (dispatchLock === false && subscribeCallback) {
    subscribeCallback({});
    dispatchLock = true;
  }

  if (global.inputFoucs && rafId) {
    cancelAnimationFrame(rafId);
    rafId = undefined;
  } else {
    rafId = requestAnimationFrame(rafDispatch);
  }
}

class Model extends React.Component<Props> {
  constructor(props: Props) {
    super(props);
  }

  /** 广播，将数据的更新从上至下传播出去 */
  public static dispatch(): void {
    // 判断是否是从输入框触发的，如果是就不加setTimeout，因为输入框加setTimeout在输入中文时会有BUG
    if (global.inputFoucs) {
      subscribeCallback({});
      global.inputFoucs = false;
      dispatchLock = true;
    } else {
      dispatchLock = false;
      if (rafId === undefined) {
        rafDispatch();
      }
    }
  }

  public state: State = {
    load: false
  };

  public componentDidMount(): void {
    this.setState({
      load: true
    }, () => {
      rafDispatch();
    });
  }

  public render(): JSX.Element {
    return (
      <Subscription source={{}}>
        {this.state.load ? (value: object) => {
          return this.props.children(value);
        } : () => null}
      </Subscription>
    );
  }
}

export const Context = React.createContext({});
export default Model;