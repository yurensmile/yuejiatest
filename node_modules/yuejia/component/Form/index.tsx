import yj from '../../typings/index';
import * as React from 'react';
import * as classNames from 'classnames';
import Fields from '../../_base/service/fields';
import FormService, { Params as SendParams } from './service';
import { Props as FormItemProps } from '../FormItem';

interface Props extends yj.ComponentProps  {
  service?: FormService;
  params?: SendParams;
  children?: any;
  /** 点击submit类型按钮的响应，只有当complete属性为空时才会调用 */
  onSubmit?: (complete: boolean) => void | boolean;
  /** 在onSubmit函数验证通过后最终调用的方法 */
  finally?: () => void;
  /** 当FormItem有增加或减少时使用，在视图更新时做比较 */
  refreshId?: any;
  /** 会和FormItem下的service合并 */
  fields?: Fields<any>[];
}

interface State {

}

const prefixCls = 'yj-component-form';
export const FormContext = React.createContext(new FormService({}));
class Form extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.onSubmit = this.onSubmit.bind(this);
    this.each = this.each.bind(this);
  }

  private fields: Fields<any>[] = [];
  /** while结束标记 */
  // private findFieldEnd: boolean = false;
  // /** 每次循环的element */
  // private findFieldItem: React.ReactElement<FormItemProps> | undefined;

  public componentDidMount(): void {
    this.findField(this.props.children);
  }

  public componentDidUpdate(prevProps: Props): void {
    if (this.props.refreshId !== undefined && this.props.refreshId !== prevProps.refreshId) {
      this.fields = [];
      this.findField(this.props.children);
    }
  }

  private each(children: React.ReactChild): void {
    React.Children.forEach(children, (child) => {
      const formitem = child as React.ReactElement<FormItemProps>;
      if (formitem && formitem.props) {
        if (formitem.props.service && this.props.service) {
          this.fields.push(formitem.props.service);
        } else if (formitem.props.children) {
          this.each(formitem.props.children);
        }
      }
    });
  }

  private findField(children: React.ReactChild): void {
    React.Children.forEach(children, this.each);

    if (this.props.fields) {
      this.fields = this.fields.concat(this.props.fields);
    }

    if (this.props.service) {
      this.props.service.fields.set(this.fields);
    }
  }

  private onSubmit(e: React.FormEvent<HTMLFormElement>): void {
    e.preventDefault();
    const service = this.props.service;
    const complete = service ? service.complete : true;

    if (this.props.onSubmit) {
      const state = this.props.onSubmit(complete);

      if (state === false) {
        return;
      }
    }

    if (service) {
      service.submit(this.props.params);

      if (!complete) {
        return;
      }
    }

    if (this.props.finally) {
      this.props.finally();
    }
  }

  public render(): JSX.Element {
    const props = this.props;
    const { children } = props;

    return (
      <FormContext.Provider value={props.service as FormService}>
        <form
          className={classNames(prefixCls, props.className)}
          style={props.style}
          onSubmit={this.onSubmit}
          autoComplete="off"
        >
          {children}
        </form>
      </FormContext.Provider>
    );
  }
}

export default Form;
