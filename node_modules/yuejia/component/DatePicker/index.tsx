import * as React from 'react';
import { Data, Value } from '../Picker/Item';
import Picker, { Base as PikcerProps } from '../Picker';
import { SelectedItem } from '../Picker/Picker';
import Service from './service';
import createRangeDate from '../../utils/createRangeDate';
import dateformat, { Mode } from '../../utils/dateformat';
import ObArray from '../../app/datatype/obArray';

export interface Props extends PikcerProps {
  service?: Service;
  minDate?: Date;
  maxDate?: Date;
  mode?: 'yyMM' | 'yyMMdd' | 'HHmm' | 'yyMMddHHmm';
}

class DatePicker extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.formatSelectedCol = this.formatSelectedCol.bind(this);
    this.format = this.format.bind(this);
  }

  private data: ObArray<Data> = new ObArray({
    defaultValue: createRangeDate({
      minDate: this.props.minDate as Date,
      maxDate: this.props.maxDate as Date,
      mode: this.props.mode as Props['mode']
    })
  });

  public static defaultProps: Props = {
    minDate: new Date(2000, 0, 1, 0, 0),
    maxDate: new Date(2030, 0, 1, 23, 0),
    mode: 'yyMMddHHmm',
  };

  private formatSelectedCol(currentCol: number, selectedItem: SelectedItem[]): number[] {
    return selectedItem as number[];
  }

  private format(value: Value[]): string {
    return dateformat(value.slice(), this.props.mode as Mode);
  }

  public render(): JSX.Element {
    return (
      <Picker
        {...this.props}
        data={this.data}
        cascade
        formatSelectedCol={this.formatSelectedCol}
        service={this.props.service}
        format={this.props.format ? this.props.format : this.format}
      />
    );
  }
}

export default DatePicker;