import ServiceRequest, { Props as RequestOptions  } from '../../app/request';
import Toast from '../../component/Toast';
import { Data } from '../../component/Banner/Item';
import ObArray from '../../app/datatype/obArray';
import ObObject from '../../app/datatype/obObject';

interface Props extends RequestOptions {
}

class Banner extends ServiceRequest {
  constructor(props: Props) {
    super(props);

    this.hasApi = !!props.api;
  }

  public readonly hasApi: boolean;
  public data: ObArray<Data> = new ObArray({ request: this });
  private index: ObObject<number> = new ObObject({ defaultValue: 0 });
  /** 用于判断是否是手动跳转 */
  private goToPageId: number = 0;

  /** 发送请求 */
  public async send(useCache?: boolean): Promise<void> {
    if (useCache === false) {
      this.request();
    } else {
      this.readCache<Data[]>({
        data: this.data.get(),
        hit: (data) => this.data.set(data),
        miss: () => this.request()
      });
    }
  }

  /** 发送请求 */
  public async request(): Promise<void> {
    this.action({
      config: {
        url: this._api,
        method: 'get',
        params: this.requestData && this.requestData()
      }
    }).then((response) => {
      if (response.retCode === '0000') {
        if (this._callback) {
          this._callback(response);
        }
      } else {
        this.data.set([]);
        Toast.show(response.retMsg);
      }
    }).catch((err) => {
      if (this._failback) {
        this._failback(err);
      }
    });
  }

  public setIndex(index: number, goToPage?: boolean): void {
    this.index.set(index);

    if (goToPage) {
      this.goToPageId++;
    }
  }
  public getIndex(): number {
    return this.index.get();
  }

  public getGoToPageId(): number {
    return this.goToPageId;
  }
}

export default Banner;