import * as React from 'react';
import * as classNames from 'classnames';
import ImgView, { BaseProps as ImgViewProps } from '../ImgView';
import Video from '../Video';
import { BaseProps as StateBaseProps } from '../StateMachine';
import isImgFile from '../../utils/isImgFile';

export interface Data {
  id?: string;
  src: string;
  link?: string;
}

export interface Props extends ImgViewProps, StateBaseProps  {
  className?: string;
  style?: React.CSSProperties;
  data: Data[];
  itemCls?: string;
  imgCls?: string;
  /** 空视图 */
  emptyView?: any;
  /** 加载失败的视图 */
  failView?: string;
  /** 点击事件，会把当前的数据传入 */
  onClick: (data: Data) => void;
  /** 数据的id，用来判断数据是否发生变化 */
  dataId: any;
  /** 视频封面 */
  poster?: string;
}

const prefixCls = 'yj-component-banner';
class Item extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.onLoad = this.onLoad.bind(this);
  }

  public shouldComponentUpdate(nextProps: Props): boolean {
    return this.props.dataId !== nextProps.dataId;
  }

  private onLoad(elem: HTMLDivElement, state: 'complete' | 'fail'): void {
    if (state === 'fail') {
      elem.classList.add(`${prefixCls}-img-fail`);
      elem.style.backgroundImage = `url(${this.props.failView})`;
    }
  }

  public render(): JSX.Element[] {
    const { className, data, shadow, loadingStyle, mode, emptyView , itemCls, imgCls, onClick, style, poster } = this.props;

    return data.map((item, i) => {
      if (item.src) {
        if (isImgFile(item.src)) {
          return (
            <ImgView
              key={item.src + i}
              className={classNames(`${prefixCls}-img`, className, itemCls, imgCls)}
              id={item.id}
              onClick={() => onClick(item)}
              completeView={item.src}
              loadingStyle={loadingStyle}
              shadow={shadow}
              mode={mode}
              stateMachine={false}
              style={style}
              onLoad={this.onLoad}
            />
          );
        } else {
          return (
            <Video
              key={item.src + i}
              className={classNames(`${prefixCls}-img`, className, itemCls, imgCls)}
              src={item.src}
              style={style}
              poster={poster || item.src}
              componentName="轮播图视频"
            />
          );
        }
      } else {
        return emptyView;
      }
    });
  }
}

export default Item;