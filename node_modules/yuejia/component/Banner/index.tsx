import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import Carousel, { CarouselBaseProps, CarouselProps } from './Carousel';
import { Data } from './Item';
import View from '../View';
import BannerService from './service';
import Link from '../Link';
import PageStack from '../PageStack';
import sheet, { DetailParams, getActionName } from '../../model/behavior/sheet';
import wx from '../../app/weixin';
import ImgView from '../../component/ImgView';
import './index.scss';

export interface BaseProps extends yj.ComponentProps, CarouselBaseProps {
  /** 是否显示图片当前索引/总数 */
  showIndex?: boolean;
  /** 加载时的样式 */
  loadingStyle?: React.CSSProperties;
  /** 图片加载失败的视图 */
  failView?: string;
}

export interface Props extends BaseProps, yj.ComponentBehavior {
  /** 渲染的数据 */
  data: CarouselProps['data'];
  service?: BannerService;
  /** 点击事件，会把当前的数据传入 */
  onClick?: (data: Data) => void;
}

const Complete = View.Complete;
const Empty = View.Empty;
const Fail = View.Fail;
const prefixCls = 'yj-component-banner';

class Banner extends React.Component<Props> {
  constructor(props: Props) {
    super(props);

    this.onClick = this.onClick.bind(this);
    this.onAfterSlide = this.onAfterSlide.bind(this);
  }

  private onAfterSlide(index: number, direction: 'prev' | 'next', isAuto: boolean): void {
    const { onAfterSlide, service } = this.props;
    const stackComponent = PageStack.getStackComponent();
    const data = this.props.data.get();

    if (onAfterSlide) {
      onAfterSlide(index, direction, isAuto);
    }

    if (service) {
      service.setIndex(index);
    }

    if (isAuto === false && stackComponent) {
      stackComponent.behavior.trigger<DetailParams['Banner']>({
        actionName: getActionName(sheet.Banner, 0, this.props),
        detailedData: {
          id: data && data[index].id
        },
      });
    }
  }

  private renderIndexBox(index: number, total: number): JSX.Element {
    return (
      <div className={`${prefixCls}-indexBox`} key="renderIndexBox">{index}&nbsp;/&nbsp;{total}</div>
    );
  }

  private onClick(data: Data): void {
    const { onClick } = this.props;
    const stackComponent = PageStack.getStackComponent();

    if (stackComponent) {
      stackComponent.behavior.trigger<DetailParams['Banner']>({
        actionName: getActionName(sheet.Banner, 1, this.props),
        detailedData: {
          id: data.id
        },
      });
    }

    if (data.link) {
      const link = data.link;
      if (stackComponent) {
        stackComponent.behavior.postAction.send({
          manually: true,
          callback: () => {
            Link.go(link);
          }
        });
      } else {
        Link.go(link);
      }
    } else if (onClick) {
      onClick(data);
    } else {
      wx.previewImage(data.src, ImgView.defaultHost);
    }
  }

  private getCompleteView(): (JSX.Element | null)[] {
    const {
      className, dots, showIndex, autoplay, shadow, slideHeight, service, loadingStyle, mode, itemCls,
      imgCls, failView, emptyView, poster
    } = this.props;
    const data = this.props.data.get();
    const index = service ? service.getIndex() : 0;
    const goToPageId = service && service.getGoToPageId();

    return data.length ? [
      showIndex && data.length > 0 ? this.renderIndexBox(index + 1, data.length) : null,
      <Carousel
        key="Carousel"
        itemCls={itemCls}
        imgCls={imgCls}
        data={this.props.data}
        slideHeight={slideHeight}
        autoplay={autoplay && data.length > 1}
        dots={dots}
        onAfterSlide={this.onAfterSlide}
        shadow={shadow}
        index={index}
        loadingStyle={loadingStyle}
        mode={mode}
        onClick={this.onClick}
        goToPageId={goToPageId}
        swiping={data.length > 1}
        failView={failView}
        poster={poster}
      />
    ] : [
      <div key="empty" className={classNames(`${prefixCls}-empty`, className)}>{emptyView}</div>
    ];
  }

  public render(): JSX.Element | (JSX.Element | null)[] {
    const { className, service, loadingStyle, style } = this.props;

    return service && service.hasApi ? (
      <div className={classNames(prefixCls, className)} style={style}>
        <View request={service} loadingStyle={loadingStyle}>
          <Complete>
            {this.getCompleteView()}
          </Complete>
          <Empty>
            <div className={classNames(`${prefixCls}-empty`, className)} />
          </Empty>
          <Fail>
            <div className={classNames(`${prefixCls}-empty`, className)} />
          </Fail>
        </View>
      </div>
    ) : (
      <div className={classNames(prefixCls, className)}>
        {this.getCompleteView()}
      </div>
    );
  }
}

export default Banner;