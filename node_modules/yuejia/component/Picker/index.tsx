import * as React from 'react';
import * as classNames from 'classnames';
import PickerPanel, { Base as PickerPanelBase, Props as PickerPanelProps } from './Picker';
import { Value, Data } from './Item';
import Popup from '../Popup';
import IconText from '../IconText';
import Service from './service';
import ObArray from '../../app/datatype/obArray';
import env from '../../utils/env';
import svgRootPaht from '../../utils/svgRootPath';
const rightSvg = svgRootPaht + require('../../assets/right.svg').id;

export interface Base extends PickerPanelBase {
  /** 点击弹出Picker的按钮的样式 */
  buttonCls?: string;
  /** 是否禁用 */
  disabled?: boolean;
  /** 取消的文本 */
  dismissText?: string;
  /** 确定的文本 */
  okText?: string;
  /** 取消和确定之间的标题 */
  title?: string;
  /** 占位字符 */
  placeholder?: string;
  /** 是否在按钮上显示向右的箭头 */
  rightIcon?: boolean;
  /** 格式化显示的文本 */
  format?: (value: Value[]) => string;
  /** 确定的回调 */
  onOk?: (value: Value[]) => void;
  /** 当picker弹出来时 */
  onPopup?: () => void;
}

export interface Props extends Base {
  service?: Service;
  data: PickerPanelProps['data'];
}

interface State {
  visible: boolean;
  value: Value[];
}

/**
 * 索引超过数据长度时使用，仅用于非级联的模式
 * 如果索引超出数据的长度，就取数据最后一位
 */
function getValueWhenOverDataLength(props: Props, state: State): State | null {
  const data = props.data.get() as Data[][];
  const value = props.service && props.service.value.get();
  const newAllValue: Value[] = [];

  if (!value || (value && value.length === 0)) {
    return null;
  }

  for (let i = 0; i < data.length; i++) {
    // 有可能value[i]不存在
    if (value[i]) {
      const index = value[i].index;
      if (index && index >= data[i].length) {
        const last = data[i].length - 1;
        const newValue = data[i][last];
        if (newValue) {
          newAllValue[i] = {
            label: newValue.label,
            value: newValue.value,
            index: last
          };
        }
      } else {
        const newValue = data[i][index];
        newAllValue[i] = {
          label: newValue.label,
          value: newValue.value,
          index
        };
      }
    }
  }

  // 当新值和旧值不一致时才去触发changeValue
  if (props.service && newAllValue.length && JSON.stringify(newAllValue) !== JSON.stringify(state.value)) {
    props.service.changeValue(newAllValue);
    return {
      ...state,
      value: newAllValue
    };
  }

  return null;
}

const prefixCls = 'yj-component-picker';
class Picker extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.toogleVisible = this.toogleVisible.bind(this);
    this.onScrollEnd = this.onScrollEnd.bind(this);
    this.onCreate = this.onCreate.bind(this);
    this.onOk = this.onOk.bind(this);
  }

  public static defaultProps: Props = {
    data: new ObArray<Data>(),
    dismissText: '取消',
    okText: '确定',
    placeholder: '请选择',
    format: (value) => value.map((item) => item.label).join(','),
  };

  public state: State = {
    visible: false,
    value: []
  };

  public componentDidMount(): void {
    if (env === 'development') {
      const { cascade } = this.props;
      const data = this.props.data.get();

      if (data.length && (data as Data[][])[0]) {
        if (cascade && (data as Data[][])[0].length >= 0) {
          console.error('级联模式下data只能是一维数组', data);
        }

        if (!cascade && typeof (data as Data[][])[0][0] === 'undefined') {
          console.error('非级联模式下data只能是二维数组', data);
        }
      }
    }
  }

  public static getDerivedStateFromProps(nextProps: Props, prevState: State): State | null {
    // 非级联情况下
    if ((!nextProps.cascade && nextProps.data.isChange)) {
      return getValueWhenOverDataLength(nextProps, prevState);
    }
    return null;
  }

  private toogleVisible(): void {
    const visible = !this.state.visible;
    this.setState({ visible });

    if (visible && this.props.onPopup) {
      this.props.onPopup();
    }
  }

  private onOk(): void {
    if (this.props.onOk) {
      this.props.onOk(this.state.value);
    }

    if (this.props.service) {
      this.props.service.changeValue(this.state.value);
    }

    this.toogleVisible();
  }

  private onScrollEnd(currentCol: number, currentValue: Value, selectedIndex: number, allValue: Value[]): void {
    this.state.value = allValue;
  }

  private onCreate(data: Data[][]): void {
    const serviceValue = this.props.service && this.props.service.value.get();
    if (serviceValue && serviceValue.length) {
      this.setState({
        value: serviceValue
      });
    } else {
      for (let i = 0; i < data.length; i++) {
        const item = data[i][0];
        this.state.value[i] = {
          label: item.label,
          value: item.value,
          index: 0
        };
      }
    }
  }

  public render(): JSX.Element {
    const { buttonCls, disabled, dismissText, okText, title, service, placeholder, rightIcon } = this.props;
    const format = this.props.format as ((value: Value[]) => string);
    const value = service && service.value.get();
    const label = value && value.length ? format(value) : placeholder as string;
    return (
      <Popup
        visible={this.state.visible}
        contentCls={`${prefixCls}-popup`}
      >
        <Popup.Button
          className={classNames(buttonCls, {
            [`${prefixCls}-placeholder`]: !(value && value.length)
          })}
          onClick={this.toogleVisible}
          disabled={disabled}
        >
          {rightIcon ? (
            <IconText
              iconCls={`${prefixCls}-icontext-icon`}
              src={rightSvg}
              text={label}
              flexDirection="row-reverse"
            />
          ) : label}
        </Popup.Button>
        <Popup.Content>
          <div className={`${prefixCls}-popup-header`}>
            <div className={`${prefixCls}-popup-button ${prefixCls}-popup-header-left`} onClick={this.toogleVisible}>
              {dismissText}
            </div>
            {title ? <div className={`${prefixCls}-popup-button ${prefixCls}-popup-title`}>{title}</div> : null}
            <div className={`${prefixCls}-popup-button ${prefixCls}-popup-header-right`} onClick={this.onOk}>
              {okText}
            </div>
          </div>
          <PickerPanel
            {...this.props}
            data={this.props.data}
            value={service && service.value.get()}
            onScrollEnd={this.onScrollEnd}
            onCreate={this.onCreate}
          />
        </Popup.Content>
      </Popup>
    );
  }
}

export default Picker;