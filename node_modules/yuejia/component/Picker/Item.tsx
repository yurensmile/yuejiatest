import * as React from 'react';
import * as classNames from 'classnames';
import * as BetterScroll from 'better-scroll';

interface ValueBase {
  label: string | number;
  value: string | number;
}

export interface Value extends ValueBase {
  index: number;
}

export interface Data extends ValueBase {
  children?: Data[];
}

export interface Base {
  /** item组件根样式 */
  itemCls?: string;
  /** 选项文本的样式 */
  textCls?: string;
}

interface Props extends Base {
  /** 渲染的数据 */
  data: Data[];
  dataId: number;
  /** 选中的值 */
  value: ValueBase;
  /** 滚动条单行选中的索引 */
  selectedIndex: number;
  /** 滚动结束后 */
  onScrollEnd: (value: Value, selectedIndex: number) => void;
}

export const itemHeight: number = 34;

/** 计算显示区域内居中的序号 */
function calcNum(): number {
  const rootHeight = itemHeight * 7;
  let value = Math.floor(rootHeight / itemHeight);
  if (value % 2 === 0) {
    value--;
  }
  value--;
  value /= 2;

  return value;
}

export const num: number = calcNum();
const BScroll = (BetterScroll as any).default as BScrollStatic;
const prefixCls = 'yj-component-picker-item';

class Item extends React.PureComponent<Props> {
  constructor(props: Props) {
    super(props);

    this.elemRef = React.createRef();
    this.onScrollEnd = this.onScrollEnd.bind(this);
  }

  private elemRef: React.RefObject<HTMLDivElement>;
  private wheel!: BScroll;

  public componentDidMount(): void {
    this.create();
  }

  public componentDidUpdate(prevProps: Props): void {
    if (this.props.dataId !== prevProps.dataId) {
      this.wheel.refresh();
    }

    if (this.props.selectedIndex !== prevProps.selectedIndex) {
      this.wheel.wheelTo(this.props.selectedIndex);
    }
  }

  public componentWillUnmount(): void {
    if (this.wheel) {
      this.wheel.off('scrollEnd', this.onScrollEnd);
      this.wheel.destroy();
    }
  }

  private create(): void {
    if (this.elemRef.current) {
      this.wheel = new BScroll(this.elemRef.current, {
        scrollX: false,
        scrollY: true,
        wheel: {
          selectedIndex: this.props.selectedIndex,
          rotate: 0,
          adjustTime: 300,
          wheelWrapperClass: 'yj-component-picker-item-col',
          wheelItemClass: 'yj-component-picker-item-text'
        },
        swipeTime: 1000,
        bounceTime: 300,
        probeType: 3
      });

      this.wheel.on('scrollEnd', this.onScrollEnd);
    } else {
      console.error('this.elemRef不存在');
    }
  }

  private onScrollEnd(): void {
    const selectedIndex = this.wheel.getSelectedIndex();
    const value = this.indexToValue(this.props, selectedIndex);

    this.props.onScrollEnd(value, selectedIndex);
  }

  /** 索引转值 */
  private indexToValue(props: Props, index: number): Value {
    const data = props.data[index];
    return {
      label: data.label,
      value: data.value,
      index
    };
  }

  public render(): JSX.Element {
    const { itemCls, textCls, data } = this.props;

    return (
      <div
        className={classNames(prefixCls, itemCls)}
        ref={this.elemRef}
        style={{
          padding: `${itemHeight * num}px 0`
        }}
      >
        <div className={`${prefixCls}-col`}>
          {data.map((item, i) => (
            <div
              key={item.value}
              className={classNames(`${prefixCls}-text`, textCls)}
            >{item.label}</div>
          ))}
        </div>
      </div>
    );
  }
}

export default Item;