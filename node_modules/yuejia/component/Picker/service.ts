import Fields, { BaseProps } from '../../_base/service/fields';
import { Value, Data } from './Item';
import ObArray from '../../app/datatype/obArray';

class Picker extends Fields<Value[]> {
  constructor(props: BaseProps<Value[]>) {
    super(props);

    this.value = new ObArray({ defaultValue: props.defaultValue });
  }

  public value: ObArray<Value>;

  public clear(): void {
    this.value.set([]);
    this.setPrompt('');
  }

  /** 用于在setValue时获取index */
  public findIndex(cascade: boolean, data: Data[] | Data[][], value: Value['value'][]): number[] {
    const indexs: number[] = [];
    if (cascade) {
      let nextData: Data[] | undefined = data as Data[];
      let i = 0;

      while (nextData && nextData.length) {
        const index = nextData.findIndex((d) => d.value === value[i]);
        const item: Data = nextData[index as number];
        nextData = item.children;
        indexs.push(index || 0);
        i++;
      }
    } else {
      value.forEach((item, i) => {
        const currentData = data[i] as Data[];
        const index = currentData.findIndex((d) => d.value === item);

        indexs.push(index);
      });
    }

    return indexs;
  }
}

export default Picker;