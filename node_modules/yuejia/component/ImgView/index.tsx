import yj from '../../typings';
import * as React from 'react';
import * as classNames from 'classnames';
import StateMachine, { BaseProps as StateBaseProps, Type as StateType } from '../StateMachine';
import isHttp from '../../utils/isHttp';
import wx from '../../app/weixin';
import sheet, { getActionName, DetailParams } from '../../model/behavior/sheet';
import PageStack from '../PageStack';
import './index.scss';

export interface BaseProps {
  /** div模式不会自动设置高度，img模式会根据宽度设置高度 */
  mode?: 'div' | 'img';
  /** 是否要添加内阴影 */
  shadow?: boolean;
  /** 主机地址 */
  host?: string;
}

interface Props extends StateBaseProps, yj.ComponentProps, BaseProps, yj.ComponentBehavior {
  /** 正常状态想展示的图片，即img标签的src属性 */
  completeView: string;
  /** 加载失败的视图 */
  failView?: string;
  /** 加载中的视图 */
  loadingView?: string;
  /** 是否启用状态机 */
  stateMachine?: boolean;
  /** 点击事件 */
  onClick?: yj.OnClick<HTMLDivElement>;
  /** 图片加载失败时候的点击事件 */
  onFailClick?: yj.OnClick<HTMLDivElement>;
  /** 图片加载完成或失败 */
  onLoad?: (elemRef: HTMLDivElement, state: 'complete' | 'fail') => void;
  /** 容器的宽度 */
  containerWidth?: number | 'vw';
  /** 是否可以点击预览大图，有onClick时不会触发 */
  previewImage?: boolean;
  imgId?: string;
}

interface State {
  state: StateType;
}

const prefixCls = 'yj-component-imgview';
// const throttle: _.LoDashStatic['throttle'] = require('lodash/throttle');

class ImgView extends React.Component<Props, State> {
  constructor(props: Props, state: State) {
    super(props, state);

    this.elemRef = React.createRef();
    this.onImgLoad = this.onImgLoad.bind(this);
    this.onImgError = this.onImgError.bind(this);
    this.onClick = this.onClick.bind(this);
  }

  public static defaultProps: Props = {
    mode: 'div',
    completeView: '',
    failView: undefined,
    loadingView: undefined,
    stateMachine: true,
    containerWidth: 'vw'
  };

  public static defaultHost: string = '';

  public state: State = {
    state: 'loading'
  };

  /** 组件是否已经被卸载 */
  private isUnmount: boolean | undefined;
  private elemRef: React.RefObject<HTMLDivElement>;
  /** 用于加载图片，改变ImgView的状态 */
  private imgElem: HTMLImageElement = new Image();
  /** 限制setImgSrc的频率 */
  // private throttled: ((props: Props) => void) & _.Cancelable = throttle((props) => this.setImgSrc(props), 300, { leading: false });

  public shouldComponentUpdate(nextProps: Props, nextState: State): boolean {
    const stateChange = this.state.state !== nextState.state;

    return stateChange;
  }

  public componentDidMount(): void {
    this.imgElem.addEventListener('load', this.onImgLoad);
    this.imgElem.addEventListener('error', this.onImgError);
    this.setImgSrc(this.props);
  }

  public componentWillUnmount(): void {
    this.isUnmount = true;

    if (this.imgElem) {
      this.imgElem.removeEventListener('load', this.onImgLoad);
      this.imgElem.removeEventListener('error', this.onImgError);
    }
  }

  public componentDidUpdate(prevProps: Props): void {
    if (this.props.completeView !== prevProps.completeView) {
      this.setImgSrc(this.props);
    }
  }

  private getSrc(props: Props, src: string | undefined, type: StateType): string {
    const host = type === 'complete' ? (props.host || ImgView.defaultHost) : '';
    const url = src && isHttp(src) ? src : host + src;

    return url;
  }

  /** 图片的onload事件 */
  private onImgLoad(): void {
    if (!this.isUnmount) {
      this.setState({ state: 'complete' }, () => {
        if (this.props.onLoad) {
          this.props.onLoad(this.elemRef.current as HTMLDivElement, 'complete');
        }
      });
    }
  }

  /** 图片的onerror事件 */
  private onImgError(): void {
    if (!this.isUnmount) {
      this.setState({ state: 'fail' }, () => {
        if (this.props.onLoad) {
          this.props.onLoad(this.elemRef.current as HTMLDivElement, 'fail');
        }
      });
    }
  }

  /** 设置this.img的src属性 */
  private setImgSrc(props: Props): void {
    const src = this.getSrc(props, props.completeView, 'complete');

    if (src && this.imgElem) {
      this.imgElem.src = src;
    } else {
      this.setState({
        state: 'fail'
      });
    }
  }

  /** 计算图片高度，在mode='img'的情况下使用 */
  private calcHeight(): number | string {
    if (this.imgElem && this.imgElem.width) {
      const proportion = this.imgElem.height / this.imgElem.width ;
      const containerWidth = this.props.containerWidth;
      return containerWidth === 'vw' ? proportion * 100 + 'vw' :  proportion * (containerWidth as number);
    }

    return 0;
  }

  private onClick(e: React.MouseEvent<HTMLDivElement>): void {
    if (this.props.onClick) {
      this.props.onClick(e);
    } else if (this.props.previewImage) {
      const stackComponent = PageStack.getStackComponent();

      if (stackComponent && this.props.componentName) {
        stackComponent.behavior.trigger<DetailParams['ImgView']>({
          actionName: getActionName(sheet.ImgView, 0, this.props),
          detailedData: {
            id: this.props.imgId
          }
        });
      }

      wx.previewImage(this.props.completeView, ImgView.defaultHost);
    }
  }

  public render(): JSX.Element {
    const { id, loadingStyle, mode, shadow, loadingView, completeView, failView, stateMachine, className, style, onFailClick } = this.props;
    const state = this.state.state;

    const complete = (
      <div
        className={classNames(`${prefixCls}-item`, `${prefixCls}-${mode}-mode`, `${prefixCls}-complete`, className)}
        style={{
          ...style,
          boxShadow: shadow ? '0 0 30px rgba(0, 0, 0, 0.9) inset' : undefined,
          backgroundImage: completeView ? `url(${this.getSrc(this.props, completeView, 'complete')})` : 'none',
          paddingBottom: mode === 'img' ? this.calcHeight() : undefined,
        }}
        id={id}
        onClick={state === 'complete' ? this.onClick : onFailClick}
        ref={this.elemRef}
      />
    );

    return stateMachine ? (
      <StateMachine
        state={this.state.state}
        loadingStyle={loadingStyle}
      >
        <StateMachine.Complete>{complete}</StateMachine.Complete>
        <StateMachine.Fail>
          <div
            className={classNames(`${prefixCls}-item`, `${prefixCls}-${mode}-mode`, `${prefixCls}-fail`, className)}
            style={{
              ...style,
              backgroundImage: failView ? `url(${this.getSrc(this.props, failView, 'fail')})` : 'none'
            }}
            onClick={onFailClick}
          />
        </StateMachine.Fail>
        <StateMachine.Loading>
          <div
            className={classNames(`${prefixCls}-item`, `${prefixCls}-${mode}-mode`, `${prefixCls}-loading`, className)}
            style={{
              ...style,
              backgroundImage: loadingView ? `url(${this.getSrc(this.props, loadingView, 'loading')})` : 'none',
            }}
          />
        </StateMachine.Loading>
      </StateMachine>
    ) : complete;
  }
}

export default ImgView;