import * as assign from 'object-assign';
import dateformat from '../../utils/dateformat';
import device from '../../utils/device';
import env from '../../utils/env';
import { Params } from '../../app/request';
import PostRequest from './post';
import PageStack from '../../component/PageStack';
import newDate from '../../utils/newDate';

interface BaseAction {
  /** 行为名称 */
  actionName: string;
}

export interface Action extends BaseAction {
  /** 停留时间 */
  stopSeconds?: number;
  /** 创建时间 */
  createTime: string;
  /** 父页面 */
  parentPage?: string;
  detailedData: string;
  /** 用户设备信息 */
  userAgent: Navigator['userAgent'];
  terminal_id?: number;
}

export interface TriggerParams<DetailedData> extends BaseAction {
  /** 停留时间 */
  stopSeconds?: number;
  /** 详细记录数据 */
  detailedData?: DetailedData;
  /** 页面名称 */
  pageName?: string;
  /** 页面进入时间 */
  entrytime?: number;
  /** 其他参数 */
  other?: Params;
}

interface Options {
  /** 用于发送行为记录 */
  api: string;
  /** 微信openid */
  openId?: string;
  /** 悦家会员的id */
  memberId?: string;
  /** 自定义参数，会加在请求参数最外层 */
  customParams?: Params;
  /** 默认参数，会加在每个action上 */
  defaultParams?: Params;
  /** 转换动作的名称 */
  translateActionName?: (action: Action, detailedData: any) => Action | undefined;
  terminal_id?: number;
}

class Behavior {
  constructor() {
    this.trigger = this.trigger.bind(this);
  }

  public actions: Map<string, Action[]>  = new Map();
  public postAction: PostRequest = new PostRequest(this);

  /** 配置参数 */
  public static options: () => Options | undefined;

  /** 拓展参数，会加在请求的最外层和action上 */
  public extendsParams: Params | undefined;
  public otherParams: Params | undefined;

  /** 触发动作 */
  public trigger<DetailedData>(params: TriggerParams<DetailedData>): void {
    if (Behavior.options) {
      const options = Behavior.options();

      if (!options) {
        return;
      }

      const { defaultParams } = options;
      const { actionName, detailedData, other, pageName, entrytime } = params;
      const component = PageStack.getStackComponent();
      const componentPageName = pageName || (component ? component.pageName : '未知页面');
      const assingDetailedData = detailedData || this.otherParams ? assign({}, detailedData, this.otherParams) : undefined;
      let action: Action | undefined = {
        actionName: componentPageName + '-' + actionName,
        detailedData: JSON.stringify(assingDetailedData ? { value: assingDetailedData } : {}),
        createTime: dateformat(new Date(), 'yyMMddHHmmss', true),
        stopSeconds: params.stopSeconds,
        terminal_id: options.terminal_id,
        userAgent: device.userAgent,
        ...other,
        ...defaultParams,
        ...this.extendsParams
      };

      if (options.translateActionName) {
        action = options.translateActionName(action, assingDetailedData);
      }

      if (action) {
        const queryAction = this.actions.get(actionName);

        if (queryAction) {
          const stopSeconds = Date.now() - newDate(queryAction[queryAction.length - 1].createTime).getTime();
          action.stopSeconds = stopSeconds;
          queryAction.push(action);
        } else {
          const stopSeconds = entrytime === undefined && component ? Date.now() - component.entrytime : Date.now() - (entrytime as number);
          action.stopSeconds = stopSeconds;
          this.actions.set(actionName, [action]);
        }

        if (env === 'development') {
          console.log(action);
        }
      }
    }
  }
}

export default Behavior;