import Request, { Event } from '../../app/request';
import Service, { Action } from './index';
import { prevPageName } from './pageLeave';
import Link from '../../component/Link';
import { getPrevPageClass } from '../../component/PageStack';
import Toast from '../../component/Toast';
// const isEmpty = require('lodash/isEmpty');

// interface Data {
//   [key: string]: Action[];
// }

interface Params extends Event {
  /** 是否允许再次发送请求 */
  again?: boolean;
  /** 是否手动触发 */
  manually?: boolean;
}

class Post extends Request {
  constructor(service: Service) {
    super();

    this.service = service;
  }

  private service: Service;
  public hasSend: boolean = false;

  private pageLeave(): void {
    const currentComponent = getPrevPageClass(1);

    if (currentComponent) {
      currentComponent.behavior.trigger({
        pageName: currentComponent.pageName,
        actionName: '离开页面',
        detailedData: {
          from: prevPageName,
          button: Link.button
        },
        stopSeconds: currentComponent.getStaytime()
      });
    }
  }

  /** 发送请求 */
  public async send(params?: Params): Promise<void> {
    if (!Service.options) {
      return;
    }
    const options = Service.options();

    if (!options) {
      return;
    }

    const { api, openId, memberId, customParams } = options;

    if (params && params.manually) {
      this.pageLeave();
    }

    if (api && (openId || memberId)) {
      const isAgain = params && params.again === true;
      const isManually = params && params.manually === true;
      if (this.service.actions.size > 0 && (this.hasSend === false || isAgain || isManually)) {
        if (params && params.manually) {
          Toast.loading('请稍等...');
        }

        const actionArr: Action[]  = [];

        this.service.actions.forEach((items) => {
          items.forEach((item) => {
            actionArr.push(item);
          });
        });

        this.action({
          config: {
            url: api,
            method: 'post',
            data: {
              openId,
              memberId,
              ...customParams,
              ...this.service.extendsParams,
              dataStr: JSON.stringify({
                page: actionArr
              }),
            }
          }
        }).then((response) => {
          if (params) {
            if (params.callback) {
              params.callback(response);
            }
            if (params.manually) {
              Toast.close();
            }
          }
          this.hasSend = true;
        }).catch((err) => {
          if (params) {
            if (params && params.failback) {
              params.failback(err);
            }
            if (params.manually) {
              Toast.close();
            }
          }

          throw err;
        });
      }
    } else if (api) {
      console.warn('行为记录发送失败，缺少memberId或openId参数');
    }

    this.service.actions.clear();
  }
}

export default Post;
