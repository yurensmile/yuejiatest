import { Props as RequestOptions } from '../../app/request';
import stringToHex from '../../utils/stringToHex';
import global from '../../app/global';
import { Props as PostProps } from './post';
import getRequest from './get';
import registerRequest from './register';
import signinRequest from './signin';
import saveRequest from './save';
import resetRequest from './reset';
import verificationRequest from './verification';
import isHttp from '../../utils/isHttp';
import Link from '../../component/Link';
import ObObject from '../../app/datatype/obObject';
import { ReadOnly } from '../../_base/datatype';

type RequestType = 'register' | 'signin' | 'reset' | 'save';

interface Options {
  /** 用户缓存id */
  readonly userCacheId: string;
  /** localStorage中设置的key，用于存储用户信息，如果应用有修改用户信息的功能建议不配置该项 */
  readonly storageKey: string | undefined;
  /** 登录页面的域名 */
  readonly loginHost?: string;
  /** 登录成功后的回调页面 */
  readonly loginCallBack?: string;
}

interface State {
  /** 登录状态 */
  loginState: boolean | undefined;
  /** 关注状态 */
  subscribeState: boolean | undefined;
}

export interface Request {
  /** 获取用户信息的动作配置 */
  getRequest?: RequestOptions;
  /** 用户发送验证码的动作配置  */
  verificationRequest?: PostProps;
  /** 注册的请求 */
  registerRequest?: PostProps;
  /** 登录的请求 */
  signinRequest?: PostProps;
  /** 重置密码的请求 */
  resetRequest?: PostProps;
  /** 保存个人信息的请求 */
  saveRequest?: RequestOptions;
}

// export interface ExtendsRequestProps extends RequestOptions {
// }

export interface Data {
  /** 微信的openId */
  openId: string;
  /** 系统的memeberId */
  memberId: string;
}

export interface StorageData extends Data {
  userCacheId: string;
}

const postRequest = [registerRequest, signinRequest, resetRequest, saveRequest, getRequest, verificationRequest];

class Account {
  constructor(options: Options & State, request: Request) {
    (['register', 'signin', 'reset', 'save', 'get', 'verification'] as RequestType[]).forEach((requestName, i) => {
      const reqiestKey = requestName + 'Request';
      const propRequest = (request as any)[reqiestKey] as RequestOptions;

      (this as any)[reqiestKey] = new (postRequest[i])(this, propRequest);
    });

    this.options = options;
    this.loginAuth = this.loginAuth.bind(this);
    Account.loginState = options.loginState;
    Account.subscribeState = options.subscribeState;
    Account.loginAuth = this.loginAuth;
  }

  /** 配置参数 */
  public options: Options;
  /** 获取用户信息的动作 */
  public readonly getRequest!: getRequest;
  /** 注册的动作 */
  public readonly registerRequest!: registerRequest;
  /** 登录动作 */
  public readonly signinRequest!: signinRequest;
  /** 重置动作 */
  public readonly resetRequest!: resetRequest;
  /** 保存用户信息动作 */
  public readonly saveRequest!: saveRequest;
  /** 发送验证码动作 */
  public readonly verificationRequest!: verificationRequest;
  /** 从接口获取到用户数据 */
  public readonly data: ObObject<(Data & any) | undefined> = new ObObject({ defaultValue: undefined });
  /** 登录状态 */
  public static loginState: boolean | undefined;
  /** 关注状态 */
  public static subscribeState: boolean | undefined;
  /** 登录认证, 已登录调用callback，否则就跳登录页 */
  public static loginAuth: (callback?: () => void, loginUrl?: string) => void;

  /** 登录认证, 已登录调用callback，否则就跳公共登录页 */
  private loginAuth(callback?: () => void, loginUrl?: string): void {
    if (Account.loginState === true && callback) {
      callback();
    } else if (loginUrl) {
      if (isHttp(loginUrl)) {
        location.href = loginUrl;
      } else {
        Link.go(loginUrl);
      }
    } else {
      const options = this.options;

      if (options && options.loginHost && options.loginCallBack) {
        const { loginHost } = options;
        const loginCallBack = encodeURIComponent(options.loginCallBack);
        const pathname = stringToHex(global.history.location.pathname);

        location.href = loginHost + '&callBackUrl=' + loginCallBack + '&route=' + pathname;
      } else {
        console.error('登录认证失败，缺少Account.loginHost或Account.loginCallBack');
      }
    }
  }

  public setData(data: ReadOnly<Data>): void {
    const options = this.options;
    Account.loginState = true;

    const svaeData = {
      ...data,
      userCacheId: options && options.userCacheId
    };

    this.data.set(data);

    if (options && options.storageKey) {
      window.localStorage.setItem(options.storageKey, JSON.stringify(svaeData));
    } else if (this.getRequest) {
      console.warn('Account.storageKey没有设置，数据不能存储在localStorage中');
    }
  }
}

export default Account;