import Request, { Props } from '../../app/request';
import Service from './index';
import Toast from '../../component/Toast';

class Get extends Request {
  constructor(service: Service, props?: Props) {
    super(props);

    this.service = service;
  }

  private service: Service;
  protected again: boolean = true;

  /** 发送请求 */
  public async send(): Promise<void> {
    // 必须是登录状态下才会发送请求
    if (Service.loginState !== true) {
      return;
    }

    const options = this.service.options;
    const { userCacheId } = options;
    // let store: string | undefined | null;

    // if (storageKey) {
    //   store = window.localStorage.getItem(storageKey);
    // }

    // // 缓存存在就去读缓存，否则重新请求
    // if (store) {
    //   let data: StorageData | undefined;

    //   try {
    //     data = JSON.parse(store) as StorageData;
    //   } catch (err) {
    //     console.error('account->get->send失败，JSON.parse错误，请检查结构是否正确', err);
    //   }

    //   // 判断userCacheId是否相同，如果不同用户信息有可能会更新
    //   if (data && data.userCacheId === userCacheId) {

    //     if (this._callback) {
    //       this._callback({
    //         retCode: '0000',
    //         retMsg: '',
    //         result: data
    //       });
    //     }

    //     this.service.setData(data);
    //     this.state.set('complete');
    //   } else {
    //     this.request(userCacheId, storageKey);
    //   }
    // } else {
      // this.request(userCacheId, storageKey);
    // }
    this.request(userCacheId);
  }

  private async request(userCacheId: string, storageKey?: string): Promise<void> {
    this.action({
      config: {
        url: this._api,
        method: 'post',
        data: {
          userCacheId
        }
      }
    }).then((response) => {
      if (response.retCode === '0000') {
        if (response.result) {

          if (this._callback) {
            this._callback(response);
          }

          this.service.setData(response.result);
        } else {
          if (storageKey) {
            window.localStorage.removeItem(storageKey);
          }
        }
      } else {
        Toast.show(response.retMsg);
      }
    }).catch((err) => {
      if (this._failback) {
        this._failback(err);
      }
      throw err;
    });
  }
}

export default Get;
