import Request, { Props as RequestOptions, Event } from '../../app/request';
import Service from './index';
import Toast from '../../component/Toast';
import Form from '../../component/Form/service';
import Input from '../../component/Input/service';

export interface Params extends Event {
}

export interface Props extends RequestOptions {
  fieldName?: {
    tel?: string;
  };
}

abstract class Post extends Request {
  constructor(service: Service, props?: Props) {
    super(props);

    this.options = props;
  }

  private options: Props | undefined;
  public form: Form = new Form({
    request: this
  });

  /** 注册账号 */
  public tel: Input = new Input({
    fieldKey: 'tel',
    fieldName: this.options && this.options.fieldName && this.options.fieldName.tel || '注册账号',
    required: true,
    validate: 'tel',
    // onChange: this.verificationRequest && this.verificationRequest.setCompelte,
    form: () => this.form
  });

  /** 验证码 */
  public verificationCode: Input = new Input({
    fieldKey: 'verificationCode',
    fieldName: '验证码',
    required: true,
    // maxLength: 4,
    // type: 'integer',
    validate: 'integer',
    form: () => this.form
  });

  /** 密码 */
  public password: Input = new Input({
    fieldKey: 'password',
    fieldName: '密码',
    required: true,
    // type: 'password',
    // maxLength: 18,
    validate: (value: string | undefined) => {
      const regexp = new RegExp(/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$/);
      const isOrderly = regexp.test(value || '');

      if (this.password) {
        this.password.setPrompt(isOrderly ? '' : '密码格式为8-16位数字加字母');
      }

      return isOrderly;
    },
    form: () => this.form
  });

  /** 再次输入密码 */
  public repassword: Input = new Input({
    fieldKey: 'password',
    fieldName: '再次输入密码',
    required: true,
    // type: 'password',
    validate: (value: string | undefined) => {
      const isEqual = this.password.value.get() === value;

      if (this.repassword) {
        this.repassword.setPrompt(isEqual ? '' : '两次密码输入不一致');
      }

      return isEqual;
    },
    form: () => this.form
  });

  /** 清空基础字段的值 */
  public baseClear(): void {
    this.tel.clear();
    this.verificationCode.clear();
    this.password.clear();
    this.repassword.clear();
    this.form.trigger.set(false);
  }

  /** 发送请求 */
  public async send(params?: Params): Promise<void> {
    this.action({
      config: {
        url: this._api,
        method: 'post',
        data: params
      }
    }).then((response) => {
      if (response.retCode === '0000') {

        if (this._callback) {
          this._callback(response);
        }

        if (params && params.callback) {
          params.callback(response);
        }

        this.baseClear();
      } else {
        Toast.show(response.retMsg);
      }
    }).catch((err) => {
      if (this._failback) {
        this._failback(err);
      }

      if (params && params.failback) {
        params.failback(err);
      }
      Toast.show('网络繁忙');
      throw err;
    });
  }
}

export default Post;
